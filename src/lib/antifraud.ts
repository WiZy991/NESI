import prisma from './prisma'
import { NextRequest } from 'next/server'

/**
 * –ü–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
 */
export function getClientIP(req: NextRequest | Request): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP
  const forwarded = req.headers.get('x-forwarded-for')
  const real = req.headers.get('x-real-ip')
  const cfConnecting = req.headers.get('cf-connecting-ip') // Cloudflare
  
  if (forwarded) {
    return forwarded.split(',')[0].trim()
  }
  
  if (real) {
    return real.trim()
  }
  
  if (cfConnecting) {
    return cfConnecting.trim()
  }
  
  return 'unknown'
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å User-Agent –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
 */
export function getUserAgent(req: NextRequest | Request): string {
  return req.headers.get('user-agent') || 'unknown'
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * (–æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ ActivityLog –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
 */
export async function logActivity(
  userId: string,
  action: string,
  req: NextRequest | Request,
  metadata?: any
) {
  try {
    const ipAddress = getClientIP(req)
    const userAgent = getUserAgent(req)
    
    await prisma.activityLog.create({
      data: {
        userId,
        action,
        ipAddress,
        userAgent,
        metadata: metadata || null,
      },
    })
    
    console.log(`üìä Activity logged: ${userId} - ${action} from ${ipAddress}`)
  } catch (error) {
    console.warn('‚ö†Ô∏è ActivityLog —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 */
export async function sendAdminAlert(
  message: string,
  link?: string,
  metadata?: any
) {
  try {
    const adminId = process.env.PLATFORM_OWNER_ID
    
    if (!adminId) {
      console.warn('‚ö†Ô∏è PLATFORM_OWNER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      return
    }
    
    await prisma.notification.create({
      data: {
        userId: adminId,
        type: 'admin_alert',
        message: `‚ö†Ô∏è ${message}`,
        link: link || '/admin',
      },
    })
    
    console.log(`üö® Admin alert sent: ${message}`)
  } catch (error) {
    console.error('‚ùå Failed to send admin alert:', error)
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * (–æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—è blockedUntil/blockedReason –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)
 */
export async function checkUserBlocked(userId: string): Promise<{
  isBlocked: boolean
  reason?: string
  until?: Date
}> {
  try {
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { blocked: true, blockedUntil: true, blockedReason: true },
    })
    
    if (!user) {
      return { isBlocked: false }
    }
    
    // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    if (user.blocked && !user.blockedUntil) {
      return { isBlocked: true, reason: user.blockedReason || undefined }
    }
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    if (user.blockedUntil) {
      const now = new Date()
      if (user.blockedUntil > now) {
        return {
          isBlocked: true,
          reason: user.blockedReason || undefined,
          until: user.blockedUntil,
        }
      } else {
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–Ω–∏–º–∞–µ–º –µ—ë
        await prisma.user.update({
          where: { id: userId },
          data: { blockedUntil: null, blockedReason: null },
        })
        return { isBlocked: false }
      }
    }
    
    return { isBlocked: false }
  } catch (error) {
    console.warn('‚ö†Ô∏è Anti-fraud –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î (–º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
    // –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    return { isBlocked: false }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤
 */
export async function validateWithdrawal(userId: string, amount: number): Promise<{
  allowed: boolean
  error?: string
  warning?: string
}> {
  const user = await prisma.user.findUnique({
    where: { id: userId },
    select: {
      createdAt: true,
      executedTasks: {
        where: { status: 'completed' },
        select: { id: true },
      },
    },
  })
  
  if (!user) {
    return { allowed: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
  const completedTasksCount = user.executedTasks.length
  if (completedTasksCount === 0) {
    return {
      allowed: false,
      error: '–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏',
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –õ–∏–º–∏—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–º–ª–∞–¥—à–µ 7 –¥–Ω–µ–π)
  const accountAge = Date.now() - user.createdAt.getTime()
  const isNewAccount = accountAge < 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
  
  if (isNewAccount && amount > 5000) {
    return {
      allowed: false,
      error: '–ù–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–º–ª–∞–¥—à–µ 7 –¥–Ω–µ–π) –º–æ–≥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 5000‚ÇΩ –∑–∞ —Ä–∞–∑',
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã
  const activeDisputes = await prisma.dispute.count({
    where: {
      OR: [
        { task: { customerId: userId } },
        { task: { executorId: userId } },
      ],
      status: { in: ['open', 'in_review'] },
    },
  })
  
  if (activeDisputes > 0) {
    return {
      allowed: false,
      error: `–£ –≤–∞—Å –µ—Å—Ç—å ${activeDisputes} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä(–∞/–æ–≤). –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–æ –∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.`,
    }
  }
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  let warning: string | undefined
  if (isNewAccount) {
    const daysOld = Math.floor(accountAge / (24 * 60 * 60 * 1000))
    warning = `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω ${daysOld} –¥–Ω–µ–π –Ω–∞–∑–∞–¥. –õ–∏–º–∏—Ç –≤—ã–≤–æ–¥–∞: 5000‚ÇΩ`
  }
  
  return { allowed: true, warning }
}

/**
 * –í—ã—è–≤–∏—Ç—å –∫—Ä—É–≥–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
export async function detectCircularDeals(userAId: string, userBId: string): Promise<{
  count: number
  suspicious: boolean
  tasks: any[]
}> {
  const mutualTasks = await prisma.task.findMany({
    where: {
      OR: [
        { customerId: userAId, executorId: userBId },
        { customerId: userBId, executorId: userAId },
      ],
      status: 'completed',
    },
    select: {
      id: true,
      title: true,
      price: true,
      completedAt: true,
      customerId: true,
      executorId: true,
    },
    orderBy: { completedAt: 'desc' },
  })
  
  const count = mutualTasks.length
  const suspicious = count >= 3 // 3+ –≤–∑–∞–∏–º–Ω—ã—Ö –∑–∞–¥–∞—á = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
  
  return { count, suspicious, tasks: mutualTasks }
}


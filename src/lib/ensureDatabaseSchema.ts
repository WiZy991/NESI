// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function ensureDatabaseSchema() {
	try {
		console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ last_private_message_read_at –≤ —Ç–∞–±–ª–∏—Ü–µ User
		const userTableInfo = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'User' 
      AND column_name = 'last_private_message_read_at'
    `

		if (!userTableInfo || (userTableInfo as any[]).length === 0) {
			console.log(
				'üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É last_private_message_read_at –≤ —Ç–∞–±–ª–∏—Ü—É User...'
			)
			await prisma.$executeRaw`
        ALTER TABLE "User" ADD COLUMN IF NOT EXISTS "last_private_message_read_at" TIMESTAMP(3)
      `
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ Task
		const taskTableInfo = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'Task' 
      AND column_name IN ('customer_last_read_at', 'executor_last_read_at')
    `

		const existingColumns = (taskTableInfo as any[]).map(
			(row: any) => row.column_name
		)

		if (!existingColumns.includes('customer_last_read_at')) {
			console.log(
				'üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É customer_last_read_at –≤ —Ç–∞–±–ª–∏—Ü—É Task...'
			)
			await prisma.$executeRaw`
        ALTER TABLE "Task" ADD COLUMN IF NOT EXISTS "customer_last_read_at" TIMESTAMP(3)
      `
		}

		if (!existingColumns.includes('executor_last_read_at')) {
			console.log(
				'üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É executor_last_read_at –≤ —Ç–∞–±–ª–∏—Ü—É Task...'
			)
			await prisma.$executeRaw`
        ALTER TABLE "Task" ADD COLUMN IF NOT EXISTS "executor_last_read_at" TIMESTAMP(3)
      `
		}

		console.log('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞')
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
	} finally {
		await prisma.$disconnect()
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export { ensureDatabaseSchema }

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if (require.main === module) {
	ensureDatabaseSchema()
}

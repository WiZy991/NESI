import bcrypt from 'bcrypt'
import { verifyJWT } from './jwt'
import prisma from './prisma'
import { NextRequest } from 'next/server'

export async function hashPassword(password: string) {
  return await bcrypt.hash(password, 10)
}

export async function verifyPassword(password: string, hashed: string) {
  return await bcrypt.compare(password, hashed)
}

export async function getUserFromToken(token: string) {
  const payload = verifyJWT(token)

  if (!payload || !payload.userId) {
    throw new Error('Token does not contain userId')
  }

  const user = await prisma.user.findUnique({
    where: { id: payload.userId },
  })

  // üü¢ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ñ–ª–∞–≥–∏ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º
  if (user && (!user.emailVerified || !user.verified)) {
    console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', user.email)
  }

  return user
}

export async function getUserFromRequest(req: Request) {
  const token = getTokenFromRequest(req)
  if (!token) return null

  try {
    const user = await getUserFromToken(token)
    if (!user) return null

    // üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
    try {
      if (user.blocked) {
        // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        if (!user.blockedUntil) {
          console.warn(`üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`)
          return null
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        const now = new Date()
        if (user.blockedUntil > now) {
          console.warn(`üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email} (–¥–æ ${user.blockedUntil})`)
          return null
        } else {
          // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–Ω–∏–º–∞–µ–º –µ—ë
          await prisma.user.update({
            where: { id: user.id },
            data: { blocked: false, blockedUntil: null, blockedReason: null },
          })
          console.log(`‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞: ${user.email}`)
          user.blocked = false
          user.blockedUntil = null
          user.blockedReason = null
        }
      }
    } catch (blockCheckError) {
      // –ï—Å–ª–∏ –ø–æ–ª—è blockedUntil/blockedReason –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      console.warn('‚ö†Ô∏è Anti-fraud –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î (–º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏')
    }

    return user
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error)
    return null
  }
}

// ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export function getTokenFromRequest(req: Request | NextRequest): string | null {
  const auth = req.headers.get('authorization')
  if (auth && auth.startsWith('Bearer ')) {
    return auth.split(' ')[1]
  }

  if ('cookies' in req) {
    const token = req.cookies.get('token')
    if (typeof token === 'string') return token
    if (token?.value) return token.value
  }

  return null
}

'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useUser } from '@/context/UserContext'
import { toast } from 'sonner'

export default function NewPostPage() {
  const [content, setContent] = useState('')
  const [loading, setLoading] = useState(false)
  const [fileId, setFileId] = useState<string | null>(null)
  const [fileName, setFileName] = useState('')
  const router = useRouter()
  const { token } = useUser()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!content.trim()) {
      toast.error('–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å')
      return
    }

    if (!token) {
      toast.error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–π–¥–∏ –∑–∞–Ω–æ–≤–æ')
      return
    }

    setLoading(true)
    const toastId = toast.loading('–°–æ–∑–¥–∞—ë–º —Ç–µ–º—É...')

    try {
      const res = await fetch('/api/community', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          title: '', // —É–±—Ä–∞–Ω
          content,
          imageUrl: fileId ? `/api/files/${fileId}` : null,
        }),
      })

      const data = await res.json()

      if (res.ok) {
        toast.success('–¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞!', { id: toastId })
        router.push('/community')
      } else {
        toast.error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞', { id: toastId })
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:', err)
      toast.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞', { id: toastId })
    } finally {
      setLoading(false)
    }
  }

  // üîº –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    const formData = new FormData()
    formData.append('file', file)

    try {
      const res = await fetch('/api/upload/chat-file', {
        method: 'POST',
        body: formData,
      })

      const data = await res.json()

      if (res.ok) {
        setFileId(data.id)
        setFileName(file.name)
        toast.success('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω')
      } else {
        toast.error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞')
    }
  }

  return (
    <div className="max-w-3xl mx-auto py-8 px-4">
      <h1 className="text-2xl font-bold text-emerald-400 mb-6">–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É</h1>

      <form
        onSubmit={handleSubmit}
        className="bg-gray-900 border border-gray-700 rounded-lg p-6 space-y-4"
      >
        <textarea
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ, –æ —á—ë–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å‚Ä¶"
          value={content}
          onChange={(e) => setContent(e.target.value)}
          rows={6}
          className="w-full px-4 py-2 rounded bg-gray-800 text-white border border-gray-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 resize-y"
        />

        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
          <label className="cursor-pointer inline-block text-sm text-emerald-400 hover:underline">
            üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª
            <input
              type="file"
              accept="image/*,.gif"
              onChange={handleFileChange}
              className="hidden"
            />
          </label>

          {fileName && (
            <p className="text-xs text-gray-400">
              –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: <span className="text-white">{fileName}</span>
            </p>
          )}

          <button
            type="submit"
            disabled={loading}
            className="px-6 py-2 rounded bg-emerald-600 hover:bg-emerald-700 text-white font-medium transition disabled:opacity-50"
          >
            {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É'}
          </button>
        </div>
      </form>
    </div>
  )
}

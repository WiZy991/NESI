'use client'

import { useEffect, useState } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import { useUser } from '@/context/UserContext'

type Badge = {
  id: string
  name: string
  description: string
  icon: string
}

type LevelInfo = {
  level: number
  xp: number
  nextLevelXP: number | null
  xpToNextLevel: number
  progressPercent: number
  suggestions: string[]
  badges: Badge[]
}

export default function LevelPage() {
  const { token } = useUser()
  const [data, setData] = useState<LevelInfo | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (!token) return

    const fetchLevel = async () => {
      try {
        const res = await fetch('/api/users/me/level', {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
        })

        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ ${res.status}`)
        const json = await res.json()
        setData(json)
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è:', err)
      } finally {
        setLoading(false)
      }
    }

    fetchLevel()
  }, [token])

  if (loading)
    return <div className="text-center mt-10 text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞...</div>

  if (!data)
    return (
      <div className="text-center mt-10 text-red-500">
        –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      </div>
    )

  const renderSuggestion = (text: string) => {
    if (text.includes('—Ç–µ—Å—Ç')) {
      return (
        <>
          <Link href="/cert" className="text-blue-400 hover:underline">
            –ü—Ä–æ–π–¥–∏
          </Link>{' '}
          –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å –æ–ø—ã—Ç
        </>
      )
    }

    if (text.includes('–∑–∞–¥–∞—á')) {
      return (
        <>
          <Link href="/tasks" className="text-blue-400 hover:underline">
            –í—ã–ø–æ–ª–Ω–∏
          </Link>{' '}
          –±–æ–ª—å—à–µ –∑–∞–¥–∞—á ‚Äî —ç—Ç–æ –¥–∞—Å—Ç XP –∏ –ø–æ–¥–Ω–∏–º–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥
        </>
      )
    }

    if (text.includes('–æ—Ç–∑—ã–≤')) {
      return (
        <>
          <Link href="/profile" className="text-blue-400 hover:underline">
            –°–æ–±–µ—Ä–∏
          </Link>{' '}
          –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 4+
        </>
      )
    }

    return text
  }

  return (
    <div className="max-w-2xl mx-auto mt-10 p-6 rounded-xl bg-black/40 border border-green-500/30 shadow-[0_0_20px_rgba(0,255,150,0.2)] text-white">
      <h1 className="text-2xl font-bold mb-6 text-green-400">üåü –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å</h1>

      <div className="space-y-2 mb-6 text-gray-300">
        <p>
          –£—Ä–æ–≤–µ–Ω—å: <span className="font-semibold text-white">{data.level}</span>
        </p>
        <p>
          –û–ø—ã—Ç (XP):{' '}
          <span className="font-semibold text-white">{data.xp}</span>
        </p>

        {data.nextLevelXP && (
          <p>
            –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:{' '}
            <span className="font-semibold text-white">
              {data.xpToNextLevel} XP
            </span>
          </p>
        )}
      </div>

      {/* üîã –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä */}
      <div className="w-full bg-gray-800 h-5 rounded-lg overflow-hidden mb-8">
        <div
          className="h-full bg-gradient-to-r from-green-400 via-green-500 to-emerald-400 transition-all"
          style={{ width: `${data.progressPercent}%` }}
        ></div>
      </div>

      {/* üìå –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
      <h2 className="text-lg font-semibold mb-2 text-blue-400">üìå –ü–æ–¥—Å–∫–∞–∑–∫–∏:</h2>
      <ul className="list-disc list-inside space-y-2 text-gray-300 mb-8">
        {data.suggestions.length > 0 ? (
          data.suggestions.map((s, i) => <li key={i}>{renderSuggestion(s)}</li>)
        ) : (
          <li>–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫, –≤—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É!</li>
        )}
      </ul>

      {/* üèÖ –ë–µ–π–¥–∂–∏ */}
      <h2 className="text-lg font-semibold mb-2 text-yellow-400">üèÖ –¢–≤–æ–∏ –±–µ–π–¥–∂–∏:</h2>
      {!data.badges || data.badges.length === 0 ? (
        <p className="text-gray-400">–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ, –Ω–æ –≤—Å—ë –≤–ø–µ—Ä–µ–¥–∏!</p>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {data.badges.map((badge) => (
            <div
              key={badge.id}
              className="flex items-center space-x-3 bg-gray-800/60 p-3 rounded-lg border border-gray-700 hover:border-yellow-500 transition shadow"
            >
              <Image
                src={badge.icon}
                alt={badge.name}
                width={40}
                height={40}
                className="rounded"
              />
              <div>
                <p className="font-semibold text-white">{badge.name}</p>
                <p className="text-sm text-gray-400">{badge.description}</p>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

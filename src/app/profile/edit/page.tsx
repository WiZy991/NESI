'use client'

import { useUser } from '@/context/UserContext'
import ProtectedPage from '@/components/ProtectedPage'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { toast } from 'sonner'

export default function EditProfilePage() {
  const { user, token, login, loading } = useUser()
  const router = useRouter()

  const [fullName, setFullName] = useState('')
  const [role, setRole] = useState<'customer' | 'executor'>('customer')
  const [password, setPassword] = useState('')
  const [description, setDescription] = useState('')
  const [location, setLocation] = useState('')
  const [skills, setSkills] = useState('')
  const [avatarFile, setAvatarFile] = useState<File | null>(null)
  const [saving, setSaving] = useState(false)

  useEffect(() => {
    if (user) {
      setFullName(user.fullName || '')
      setRole(user.role || 'customer')
      setDescription(user.description || '')
      setLocation(user.location || '')
      setSkills(Array.isArray(user.skills) ? user.skills.join(', ') : user.skills || '')
    }
  }, [user])

  const handleSave = async () => {
    if (!token) return toast.error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    if (!fullName.trim()) return toast.error('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')

    setSaving(true)
    const toastId = toast.loading('–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...')

    try {
      const formData = new FormData()
      formData.append('fullName', fullName)
      formData.append('role', role)
      if (password) formData.append('password', password)
      formData.append('description', description)
      formData.append('location', location)
      formData.append('skills', skills)
      if (avatarFile) formData.append('avatar', avatarFile)

      const res = await fetch('/api/profile', {
        method: 'PATCH',
        headers: { Authorization: `Bearer ${token}` },
        body: formData,
      })

      const data = await res.json()
      if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏')

      login(data.user, token)
      toast.success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω', { id: toastId })
      router.push('/profile')
    } catch (err: any) {
      toast.error(err.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { id: toastId })
    } finally {
      setSaving(false)
    }
  }

  if (loading || !user) return <div className="p-6 text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞...</div>

  return (
    <ProtectedPage>
      <div className="p-6 max-w-xl mx-auto space-y-6 bg-black/40 border border-emerald-500/30 rounded-xl shadow-[0_0_20px_rgba(16,185,129,0.2)]">
        <h1 className="text-2xl font-bold text-emerald-400 mb-4">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h1>

        {/* –ò–º—è */}
        <div>
          <label className="block mb-1 text-gray-300">–ò–º—è</label>
          <input
            type="text"
            value={fullName}
            onChange={(e) => setFullName(e.target.value)}
            className="w-full px-3 py-2 bg-transparent border border-emerald-500/30 rounded-lg text-white 
                       focus:outline-none focus:ring-2 focus:ring-emerald-400"
          />
        </div>

        {/* –†–æ–ª—å */}
        <div className="relative">
          <label className="block mb-1 text-gray-300">–†–æ–ª—å</label>
          <select
            value={role}
            onChange={(e) => setRole(e.target.value as 'customer' | 'executor')}
            className="w-full px-3 py-2 bg-black text-emerald-400 border border-emerald-500/50 rounded-lg 
                       focus:outline-none focus:ring-2 focus:ring-emerald-400 
                       appearance-none shadow-[0_0_10px_rgba(16,185,129,0.4)]"
          >
            <option value="customer" className="bg-black text-emerald-400">
              –ó–∞–∫–∞–∑—á–∏–∫
            </option>
            <option value="executor" className="bg-black text-emerald-400">
              –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            </option>
          </select>
          <span className="absolute right-3 top-9 pointer-events-none text-emerald-400">‚ñº</span>
        </div>

        {/* –ü–∞—Ä–æ–ª—å */}
        <div>
          <label className="block mb-1 text-gray-300">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-3 py-2 bg-transparent border border-emerald-500/30 rounded-lg text-white 
                       focus:outline-none focus:ring-2 focus:ring-emerald-400"
          />
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div>
          <label className="block mb-1 text-gray-300">–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="w-full px-3 py-2 bg-transparent border border-emerald-500/30 rounded-lg text-white 
                       focus:outline-none focus:ring-2 focus:ring-emerald-400"
          />
        </div>

        {/* –ê–≤–∞—Ç–∞—Ä */}
        <div>
          <label className="block mb-1 text-gray-300">–ê–≤–∞—Ç–∞—Ä (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)</label>
          <label
            htmlFor="avatar-upload"
            className="cursor-pointer inline-block px-3 py-2 rounded-lg border border-emerald-400 
                       text-emerald-400 hover:bg-emerald-400 hover:text-black transition"
          >
            üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
          </label>
          <input
            id="avatar-upload"
            type="file"
            accept="image/*"
            onChange={(e) => {
              if (e.target.files?.[0]) {
                setAvatarFile(e.target.files[0])
              }
            }}
            className="hidden"
          />
          {avatarFile && (
            <p className="text-xs text-emerald-400 mt-1">–í—ã–±—Ä–∞–Ω: {avatarFile.name}</p>
          )}
        </div>

        {/* –ì–æ—Ä–æ–¥ */}
        <div>
          <label className="block mb-1 text-gray-300">–ì–æ—Ä–æ–¥</label>
          <input
            type="text"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            className="w-full px-3 py-2 bg-transparent border border-emerald-500/30 rounded-lg text-white 
                       focus:outline-none focus:ring-2 focus:ring-emerald-400"
          />
        </div>

        {/* –ù–∞–≤—ã–∫–∏ */}
        <div>
          <label className="block mb-1 text-gray-300">–ù–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
          <input
            type="text"
            value={skills}
            onChange={(e) => setSkills(e.target.value)}
            className="w-full px-3 py-2 bg-transparent border border-emerald-500/30 rounded-lg text-white 
                       focus:outline-none focus:ring-2 focus:ring-emerald-400"
          />
        </div>

        {/* –°–æ—Ö—Ä–∞–Ω–∏—Ç—å */}
        <button
          type="button"
          onClick={handleSave}
          disabled={saving}
          className="px-6 py-2 rounded-lg border border-emerald-400 text-emerald-400 
                     hover:bg-emerald-400 hover:text-black transition disabled:opacity-50"
        >
          {saving ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
        </button>
      </div>
    </ProtectedPage>
  )
}

import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

export async function POST(req: Request, { params }: { params: { id: string } }) {
  const admin = await getUserFromRequest(req)
  if (!admin || String(admin.role) !== 'admin') {
    return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' }, { status: 403 })
  }

  const body = await req.json().catch(() => ({}))
  const { duration, reason } = body // duration –≤ –¥–Ω—è—Ö, 0 = –Ω–∞–≤—Å–µ–≥–¥–∞
  
  let blockedUntil: Date | null = null
  
  if (duration && duration > 0) {
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    blockedUntil = new Date()
    blockedUntil.setDate(blockedUntil.getDate() + duration)
  }

  const updated = await prisma.user.update({
    where: { id: params.id },
    data: {
      blocked: true,
      blockedUntil,
      blockedReason: reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    },
  })
  
  console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${updated.email} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ${blockedUntil ? `–¥–æ ${blockedUntil.toLocaleString('ru-RU')}` : '–Ω–∞–≤—Å–µ–≥–¥–∞'}. –ü—Ä–∏—á–∏–Ω–∞: ${reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`)

  return NextResponse.json({
    user: updated,
    message: blockedUntil
      ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ${blockedUntil.toLocaleString('ru-RU')}`
      : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞',
  })
}

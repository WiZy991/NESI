import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∂–∞–ª–æ–±—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
export async function GET(req: NextRequest) {
  try {
    const me = await getUserFromRequest(req).catch(() => null)

    if (!me || me.role !== 'admin') {
      return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' }, { status: 403 })
    }

    const reports = await prisma.communityReport.findMany({
      orderBy: { createdAt: 'desc' },
      include: {
        reporter: {
          select: {
            id: true,
            fullName: true,
            email: true,
          },
        },
        post: {
          select: {
            id: true,
            content: true,
            createdAt: true,
          },
        },
        comment: {
          select: {
            id: true,
            content: true,
            createdAt: true,
            postId: true,
          },
        },
        task: {
          select: {
            id: true,
            title: true,
            description: true,
            status: true,
            createdAt: true,
            customer: {
              select: {
                id: true,
                fullName: true,
                email: true,
              },
            },
          },
        },
      },
    })

    // üß© –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    const reportsWithLinks = reports.map((r) => {
      let targetLink = null

      if (r.type === 'post' && r.post?.id) {
        targetLink = `/community/${r.post.id}`
      } else if (r.type === 'comment' && r.comment?.postId) {
        targetLink = `/community/${r.comment.postId}#comment-${r.comment.id}`
      } else if (r.type === 'task' && r.task?.id) {
        targetLink = `/tasks/${r.task.id}`
      }

      return {
        ...r,
        targetLink,
      }
    })

    return NextResponse.json({ reports: reportsWithLinks })
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∞–ª–æ–±:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
export async function DELETE(req: NextRequest) {
  try {
    const me = await getUserFromRequest(req).catch(() => null)
    if (!me || me.role !== 'admin') {
      return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' }, { status: 403 })
    }

    const body = await req.json().catch(() => ({}))
    console.log('üóëÔ∏è DELETE request body:', body)
    
    const { type, id } = body
    
    if (!type || !id) {
      console.error('‚ùå Missing type or id:', { type, id, body })
      return NextResponse.json({ 
        error: `–ù–µ —É–∫–∞–∑–∞–Ω—ã type –∏ id. –ü–æ–ª—É—á–µ–Ω–æ: type=${type}, id=${id}` 
      }, { status: 400 })
    }

    if (type === 'post') {
      const existing = await prisma.communityPost.findUnique({ where: { id } })
      if (!existing)
        return NextResponse.json({ error: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })

      await prisma.communityPost.delete({ where: { id } })
      return NextResponse.json({ ok: true, message: '–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω' })
    }

    if (type === 'comment') {
      const existing = await prisma.communityComment.findUnique({ where: { id } })
      if (!existing)
        return NextResponse.json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })

      await prisma.communityComment.delete({ where: { id } })
      return NextResponse.json({ ok: true, message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω' })
    }

    if (type === 'task') {
      const existing = await prisma.task.findUnique({ where: { id } })
      if (!existing)
        return NextResponse.json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á—É –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–Ω–µ –≤ —Ä–∞–±–æ—Ç–µ)
      if (existing.status === 'in_progress' || existing.status === 'completed') {
        return NextResponse.json(
          { error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é' },
          { status: 400 }
        )
      }

      await prisma.task.delete({ where: { id } })
      return NextResponse.json({ ok: true, message: '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞' })
    }

    return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø' }, { status: 400 })
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

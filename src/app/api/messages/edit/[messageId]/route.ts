import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import jwt from 'jsonwebtoken'

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'

// PATCH - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function PATCH(
	req: Request,
	{ params }: { params: { messageId: string } }
) {
	try {
		console.log('‚úèÔ∏è PATCH –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', params.messageId)
		
		const token = req.headers.get('Authorization')?.replace('Bearer ', '')
		if (!token) {
			return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
		}

		let decoded: any
		try {
			decoded = jwt.verify(token, JWT_SECRET)
		} catch (err) {
			console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞:', err)
			return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 })
		}

		const { content } = await req.json()
		console.log('üìù –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content)
		
		if (!content || !content.trim()) {
			return NextResponse.json(
				{ error: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' },
				{ status: 400 }
			)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		const message = await prisma.message.findUnique({
			where: { id: params.messageId },
		})

		console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:', message ? '–î–∞' : '–ù–µ—Ç')

		if (!message) {
			return NextResponse.json(
				{ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
				{ status: 404 }
			)
		}

		if (message.senderId !== decoded.userId) {
			console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤:', message.senderId, '!==', decoded.userId)
			return NextResponse.json(
				{ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' },
				{ status: 403 }
			)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ include
		const updatedMessage = await prisma.message.update({
			where: { id: params.messageId },
			data: {
				content: content.trim(),
				editedAt: new Date(),
			},
		})

		console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
		
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
		return NextResponse.json({ 
			message: {
				...updatedMessage,
				sender: {
					id: decoded.userId,
					fullName: null,
					email: null
				}
			}
		})
	} catch (error: any) {
		console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
		return NextResponse.json({ 
			error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error.message || String(error))
		}, { status: 500 })
	}
}


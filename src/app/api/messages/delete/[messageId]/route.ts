import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import jwt from 'jsonwebtoken'

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'

// DELETE - –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function DELETE(
	req: Request,
	{ params }: { params: { messageId: string } }
) {
	try {
		console.log('üóëÔ∏è DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', params.messageId)
		
		const token = req.headers.get('Authorization')?.replace('Bearer ', '')
		if (!token) {
			return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
		}

		let decoded: any
		try {
			decoded = jwt.verify(token, JWT_SECRET)
		} catch (err) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', err)
			return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 })
		}

		console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', decoded.userId)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		const message = await prisma.message.findUnique({
			where: { id: params.messageId },
		})

		console.log('üìù –ù–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message)

		if (!message) {
			return NextResponse.json(
				{ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
				{ status: 404 }
			)
		}

		if (message.senderId !== decoded.userId) {
			console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤:', message.senderId, '!==', decoded.userId)
			return NextResponse.json(
				{ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' },
				{ status: 403 }
			)
		}

		// –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ (soft delete)
		// –ï—Å–ª–∏ –ø–æ–ª–µ deletedAt –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º content
		try {
			const updatedMessage = await prisma.message.update({
				where: { id: params.messageId },
				data: {
					content: '[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]',
				},
			})

			console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', updatedMessage.id)
			return NextResponse.json({ message: updatedMessage })
		} catch (updateError) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateError)
			return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è' }, { status: 500 })
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
		return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + String(error) }, { status: 500 })
	}
}


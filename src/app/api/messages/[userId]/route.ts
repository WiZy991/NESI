import { getUserFromRequest } from '@/lib/auth'
import prisma from '@/lib/prisma'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(
	req: NextRequest,
	context: { params: Promise<{ userId: string }> }
) {
	const me = await getUserFromRequest(req)
	if (!me)
		return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

	const { userId } = await context.params // ‚úÖ —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

	if (!userId) {
		return NextResponse.json({ error: 'userId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω' }, { status: 400 })
	}

	const messages = await prisma.privateMessage.findMany({
		where: {
			OR: [
				{ senderId: me.id, recipientId: userId },
				{ senderId: userId, recipientId: me.id },
			],
		},
		include: {
			sender: {
				select: {
					id: true,
					fullName: true,
					email: true,
					avatarUrl: true,
				},
			},
			recipient: {
				select: {
					id: true,
					fullName: true,
					email: true,
					avatarUrl: true,
				},
			},
			file: {
				select: {
					id: true,
					filename: true,
					mimetype: true,
				},
			},
		},
		orderBy: { createdAt: 'asc' },
	})

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	const result = messages.map(msg => ({
		id: msg.id,
		content: msg.content,
		createdAt: msg.createdAt,
		sender: msg.sender,
		fileUrl: msg.fileUrl || (msg.file ? `/api/files/${msg.file.id}` : null),
		fileName: msg.fileName || msg.file?.filename || null,
		fileMimetype: msg.mimeType || msg.file?.mimetype || null,
	}))

	console.log('üì® –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã:', result.length)
	console.log('üìù –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', result[0])

	return NextResponse.json(result)
}

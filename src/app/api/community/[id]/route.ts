import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

// üìå –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –ø–æ—Å—Ç –ø–æ ID
export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const me = await getUserFromRequest(req).catch(() => null)

    const post = await prisma.communityPost.findUnique({
      where: { id: params.id },
      include: {
        author: {
          select: {
            id: true,
            fullName: true,
            email: true,
            avatarFileId: true,
          },
        },
        comments: {
          orderBy: { createdAt: 'asc' },
          include: {
            author: {
              select: {
                id: true,
                fullName: true,
                email: true,
                avatarFileId: true,
              },
            },
          },
        },
        _count: { select: { likes: true } },
      },
    })

    if (!post) {
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç", —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –Ω–µ –ø–∞–¥–∞–ª
  return NextResponse.json({
    post: {
      id: params.id,
      title: '[–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω]',
      content: 'üö´ –≠—Ç–æ—Ç –ø–æ—Å—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π',
      createdAt: new Date().toISOString(),
      author: {
        id: 'deleted',
        fullName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        email: 'hidden',
        avatarUrl: null,
      },
      comments: [],
      _count: { likes: 0 },
    },
    liked: false,
  })
}

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–∞–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let liked = false
    if (me) {
      const like = await prisma.communityLike.findUnique({
        where: { postId_userId: { postId: params.id, userId: me.id } },
      })
      liked = !!like
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
    const formatted = {
      ...post,
      liked,
      author: {
        ...post.author,
        avatarUrl: post.author.avatarFileId
          ? `/api/files/${post.author.avatarFileId}`
          : null,
      },
      comments: post.comments.map((c) => ({
        ...c,
        author: {
          ...c.author,
          avatarUrl: c.author.avatarFileId
            ? `/api/files/${c.author.avatarFileId}`
            : null,
        },
      })),
    }

    return NextResponse.json({ post: formatted, liked })
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /api/community/[id]:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

// üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const me = await getUserFromRequest(req).catch(() => null)
    if (!me) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const post = await prisma.communityPost.findUnique({
      where: { id: params.id },
    })
    if (!post) {
      return NextResponse.json({ error: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    if (post.authorId !== me.id) {
      return NextResponse.json(
        { error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞' },
        { status: 403 }
      )
    }

    await prisma.communityPost.delete({
      where: { id: params.id },
    })

    return NextResponse.json({ ok: true })
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

/** PATCH: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */
export async function PATCH(
  req: NextRequest,
  { params }: { params: { id: string; commentId: string } }
) {
  try {
    const me = await getUserFromRequest(req).catch(() => null)
    if (!me) return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

    const body = await req.json().catch(() => ({}))
    const { content } = body || {}
    if (!content?.trim()) {
      return NextResponse.json(
        { error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' },
        { status: 400 }
      )
    }

    const existing = await prisma.communityComment.findUnique({
      where: { id: params.commentId },
      select: { id: true, authorId: true, postId: true },
    })
    if (!existing) {
      return NextResponse.json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }
    if (existing.postId !== params.id) {
      return NextResponse.json({ error: '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–∞' }, { status: 400 })
    }
    if (existing.authorId !== me.id) {
      return NextResponse.json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' }, { status: 403 })
    }

    const updated = await prisma.communityComment.update({
      where: { id: params.commentId },
      data: { content: content.trim() },
    })

    return NextResponse.json({ ok: true, comment: updated })
  } catch (err) {
    console.error('üî• PATCH comment error:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

/** DELETE: —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è + –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ (BFS) */
export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string; commentId: string } }
) {
  try {
    const me = await getUserFromRequest(req).catch(() => null)
    if (!me) return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

    const root = await prisma.communityComment.findUnique({
      where: { id: params.commentId },
      select: { id: true, authorId: true, postId: true },
    })
    if (!root) {
      return NextResponse.json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }
    if (root.postId !== params.id) {
      return NextResponse.json({ error: '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–∞' }, { status: 400 })
    }
    if (root.authorId !== me.id && me.role !== 'admin') {
      return NextResponse.json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' }, { status: 403 })
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ id –ø–æ—Ç–æ–º–∫–æ–≤ (BFS), —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
    const toDelete: string[] = [root.id]
    let queue: string[] = [root.id]

    while (queue.length) {
      const chunk = queue.splice(0, 50) // –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–∞—á–∫—É –∑–∞–ø—Ä–æ—Å–∞
      const children = await prisma.communityComment.findMany({
        where: { parentId: { in: chunk } },
        select: { id: true },
      })
      if (children.length) {
        const ids = children.map((c) => c.id)
        toDelete.push(...ids)
        queue.push(...ids)
      }
    }

    await prisma.$transaction([
      prisma.communityComment.deleteMany({ where: { id: { in: toDelete } } }),
    ])

    return NextResponse.json({ ok: true, deleted: toDelete.length })
  } catch (err) {
    console.error('üî• DELETE comment error:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

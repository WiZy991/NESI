import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
export async function PATCH(
  req: NextRequest,
  { params }: { params: { id: string; commentId: string } }
) {
  try {
    const me = await getUserFromRequest(req).catch(() => null)
    if (!me)
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

    const body = await req.json().catch(() => ({}))
    const { content } = body

    if (!content?.trim())
      return NextResponse.json(
        { error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' },
        { status: 400 }
      )

    const existing = await prisma.communityComment.findUnique({
      where: { id: params.commentId },
    })
    if (!existing)
      return NextResponse.json(
        { error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )

    if (existing.authorId !== me.id)
      return NextResponse.json(
        { error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' },
        { status: 403 }
      )

    const updated = await prisma.communityComment.update({
      where: { id: params.commentId },
      data: { content: content.trim() },
    })

    return NextResponse.json({ ok: true, comment: updated })
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ PATCH –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

// üìå –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string; commentId: string } }
) {
  try {
    const me = await getUserFromRequest(req).catch(() => null)
    if (!me)
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

    const comment = await prisma.communityComment.findUnique({
      where: { id: params.commentId },
      include: { replies: true },
    })
    if (!comment)
      return NextResponse.json(
        { error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )

    if (comment.authorId !== me.id)
      return NextResponse.json(
        { error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' },
        { status: 403 }
      )

    // üî• –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    const deleteReplies = async (parentId: string) => {
      const replies = await prisma.communityComment.findMany({
        where: { parentId },
      })
      for (const reply of replies) {
        await deleteReplies(reply.id)
      }
      await prisma.communityComment.deleteMany({ where: { parentId } })
    }

    await deleteReplies(params.commentId)

    // –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await prisma.communityComment.delete({
      where: { id: params.commentId },
    })

    return NextResponse.json({ ok: true })
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ DELETE –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

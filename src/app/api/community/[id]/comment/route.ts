import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

// üìå –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞
export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const comments = await prisma.communityComment.findMany({
      where: { postId: params.id, parentId: null }, // —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
      orderBy: { createdAt: 'asc' },
      include: {
        author: {
          select: { id: true, fullName: true, email: true, avatarFileId: true },
        },
        replies: {   // üëà self-relation alias (children)
          include: {
            author: {
              select: { id: true, fullName: true, email: true, avatarFileId: true },
            },
          },
        },
        _count: { select: { replies: true, likes: true } },
      },
    })

    return NextResponse.json({ comments })
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

// üìå –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
export async function POST(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const me = await getUserFromRequest(req)
    if (!me) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const body = await req.json().catch(() => null)
    const { content, parentId } = body || {}

    if (!content?.trim()) {
      return NextResponse.json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—É—Å—Ç–æ–π' }, { status: 400 })
    }

    const comment = await prisma.communityComment.create({
      data: {
        content: content.trim(),
        postId: params.id,
        authorId: me.id,
        parentId: parentId || null,
      },
      include: {
        author: {
          select: { id: true, fullName: true, email: true, avatarFileId: true },
        },
      },
    })

    return NextResponse.json({ comment }, { status: 201 })
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

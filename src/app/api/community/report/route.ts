import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

export async function POST(req: NextRequest) {
  try {

    const me = await getUserFromRequest(req).catch(() => null)

    if (!me) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }
    let body
    try {
      body = await req.json()
    } catch {
      return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON' }, { status: 400 })
    }

    const { type, postId, commentId, reason, description } = body

    if (!['post', 'comment'].includes(type)) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∂–∞–ª–æ–±—ã' }, { status: 400 })
    }

    if (!reason?.trim()) {
      return NextResponse.json({ error: '–ü—Ä–∏—á–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' }, { status: 400 })
    }

    // –°–æ–∑–¥–∞—ë–º –∂–∞–ª–æ–±—É
    const report = await prisma.communityReport.create({
      data: {
        type,
        postId: type === 'post' ? postId : null,
        commentId: type === 'comment' ? commentId : null,
        reason,
        description: description?.trim() || null,
        reporterId: me.id,
      },
    })

    return NextResponse.json({ ok: true, report })
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã' }, { status: 500 })
  }
}

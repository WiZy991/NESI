import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { signJWT } from '@/lib/jwt'

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url)
    const token = searchParams.get('token')

    if (!token) {
      return NextResponse.json({ error: '–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω' }, { status: 400 })
    }

    const record = await prisma.emailVerificationToken.findUnique({
      where: { token },
      include: { user: true },
    })

    if (!record) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω' }, { status: 400 })
    }

    if (record.expiresAt < new Date()) {
      await prisma.emailVerificationToken.delete({ where: { token } })
      return NextResponse.json({ error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç—ë–∫' }, { status: 400 })
    }

    // üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: { id: record.userId },
      data: { verified: true },
    })

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    await prisma.emailVerificationToken.delete({ where: { token } })

    // üîπ –í—ã–¥–∞—ë–º JWT —Å userId (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ—è auth-—Å–∏—Å—Ç–µ–º–∞)
    const jwt = signJWT({ userId: updatedUser.id })

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º cookie –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
    const response = NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_APP_URL}/email-verified`
    )
    response.cookies.set('token', jwt, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      path: '/',
      maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
    })

    return response
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è e-mail:', error)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

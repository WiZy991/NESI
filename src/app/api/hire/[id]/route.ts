import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

export async function PATCH(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const me = await getUserFromRequest(req)
  if (!me) {
    return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
  }

  const { action }: { action: 'accept' | 'reject' } = await req.json()

  // üîé –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞–π–º–∞
  const hr = await prisma.hireRequest.findUnique({
    where: { id: params.id },
    select: { id: true, executorId: true, status: true },
  })

  if (!hr) {
    return NextResponse.json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
  }

  // üîí –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Ö–æ–¥—è—â—É—é –∑–∞—è–≤–∫—É
  if (hr.executorId !== me.id) {
    return NextResponse.json(
      { error: '–ú–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º–∏ –≤—Ö–æ–¥—è—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏' },
      { status: 403 }
    )
  }

  // üõë –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  if (hr.status !== 'pending') {
    return NextResponse.json(
      { error: '–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' },
      { status: 400 }
    )
  }

  const newStatus = action === 'accept' ? 'accepted' : 'rejected'

  const updated = await prisma.hireRequest.update({
    where: { id: hr.id },
    data: { status: newStatus },
  })

  // üîî (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)

  return NextResponse.json(updated)
}

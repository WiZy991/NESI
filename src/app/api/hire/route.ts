// src/app/api/hire/route.ts
import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

export async function POST(req: NextRequest) {
  try {
    const me = await getUserFromRequest(req)
    if (!me) {
      console.warn('‚õî /api/hire: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    if (me.role !== 'customer') {
      console.warn(`‚õî /api/hire: —Ä–æ–ª—å –Ω–µ customer (role=${me.role})`)
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 })
    }

    const body = await req.json().catch(() => null)
    const executorId = body?.executorId as string | undefined
    if (!executorId) {
      return NextResponse.json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω executorId' }, { status: 400 })
    }

    if (executorId === me.id) {
      return NextResponse.json({ error: '–ù–µ–ª—å–∑—è –Ω–∞–Ω—è—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' }, { status: 400 })
    }

    // –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    const executor = await prisma.user.findUnique({
      where: { id: executorId },
      select: { id: true, role: true },
    })
    if (!executor || executor.role !== 'executor') {
      return NextResponse.json({ error: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    // —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å? (pending/accepted)
    const existing = await prisma.hireRequest.findFirst({
      where: {
        customerId: me.id,
        executorId,
        status: { in: ['pending', 'accepted'] },
      },
      select: { id: true, status: true, createdAt: true },
    })

    if (existing) {
      return NextResponse.json(
        {
          ok: true,
          already: true,
          hireId: existing.id,
          status: existing.status,
          message:
            existing.status === 'accepted'
              ? '–ó–∞–ø—Ä–æ—Å —É–∂–µ –ø—Ä–∏–Ω—è—Ç'
              : '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        },
        { status: 409 }
      )
    }

    // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π (status –ø–æ —Å—Ö–µ–º–µ = 'pending')
    const hire = await prisma.hireRequest.create({
      data: { customerId: me.id, executorId },
      select: { id: true, status: true, createdAt: true },
    })

    // üì© —Å–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é ‚Üí —Å—Ä–∞–∑—É –≤–µ–¥—ë–º –≤ —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º
    await prisma.notification.create({
      data: {
        userId: executorId,
        type: 'hire_request',
        message: `–ó–∞–∫–∞–∑—á–∏–∫ ${me.fullName || me.email} —Ö–æ—á–µ—Ç –Ω–∞–Ω—è—Ç—å –≤–∞—Å`,
        link: `/messages/${me.id}`, // ‚úÖ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ–π–¥—ë—Ç –≤ —á–∞—Ç
      },
    })

    return NextResponse.json(
      { ok: true, already: false, hireId: hire.id, status: hire.status },
      { status: 201 }
    )
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /api/hire:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

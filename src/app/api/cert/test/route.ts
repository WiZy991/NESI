import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

function pickRandom<T>(arr: T[], take: number): T[] {
  const a = [...arr]
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[a[i], a[j]] = [a[j], a[i]]
  }
  return a.slice(0, take)
}

export async function GET(req: Request) {
  try {
    const user = await getUserFromRequest(req)
    if (!user) return NextResponse.json({ error: 'Не авторизован' }, { status: 401 })

    const { searchParams } = new URL(req.url)
    const subcategoryId = searchParams.get('subcategoryId')
    const force = searchParams.get('force') === 'true'
    if (!subcategoryId) {
      return NextResponse.json({ error: 'subcategoryId обязателен' }, { status: 400 })
    }

    const sub = await prisma.subcategory.findUnique({ where: { id: subcategoryId } })
    if (!sub) return NextResponse.json({ error: 'Подкатегория не найдена' }, { status: 404 })

    const pool = getQuestionsForSubcategory(sub.name)
    const DESIRED_PER_ATTEMPT = 10

    let test = await prisma.certificationTest.findFirst({
      where: { subcategoryId },
      include: { questions: { include: { options: true } } },
    })

    const mustRecreate =
      force || !test || (test.questions?.length ?? 0) < DESIRED_PER_ATTEMPT

    if (mustRecreate) {
      if (!pool.length) {
        return NextResponse.json({ error: 'Для подкатегории не задан пул вопросов' }, { status: 404 })
      }

      const selectedPool = pickRandom(pool, DESIRED_PER_ATTEMPT)

      await prisma.$transaction(async (tx) => {
        let current = await tx.certificationTest.findFirst({ where: { subcategoryId } })

        if (!current) {
          current = await tx.certificationTest.create({
            data: {
              subcategoryId,
              title: `Сертификация: ${sub.name}`,
              timeLimitSec: 600,
              passScore: 80,
              questionCount: selectedPool.length,
            },
          })
        } else {
          await tx.certificationOption.deleteMany({ where: { question: { testId: current.id } } })
          await tx.certificationQuestion.deleteMany({ where: { testId: current.id } })
          await tx.certificationAttempt.deleteMany({ where: { testId: current.id } })
          await tx.certificationTest.update({
            where: { id: current.id },
            data: {
              title: `Сертификация: ${sub.name}`,
              timeLimitSec: 600,
              passScore: 80,
              questionCount: selectedPool.length,
              updatedAt: new Date(),
            },
          })
        }

        for (const q of selectedPool) {
          const createdQ = await tx.certificationQuestion.create({
            data: { testId: current.id, text: q.text },
          })

          await tx.certificationOption.createMany({
            data: q.options.map((opt: { text: string; isCorrect: boolean }) => ({
              questionId: createdQ.id,
              text: opt.text,
              isCorrect: !!opt.isCorrect,
            })),
          })
        }
      })

      test = await prisma.certificationTest.findFirst({
        where: { subcategoryId },
        include: { questions: { include: { options: true } } },
      })
    }

    if (!test || !test.questions.length) {
      return NextResponse.json({ error: 'Тест или вопросы не найдены' }, { status: 404 })
    }

    const take = Math.min(test.questionCount, test.questions.length)
    const selected = pickRandom(test.questions, take)

    const safeQuestions = selected.map((q) => ({
      id: q.id,
      text: q.text,
      options: q.options.map((o) => ({ id: o.id, text: o.text })),
    }))

    return NextResponse.json({
      test: {
        id: test.id,
        title: test.title,
        timeLimitSec: test.timeLimitSec,
        passScore: test.passScore,
        questionCount: take,
      },
      questions: safeQuestions,
    })
  } catch (e) {
    console.error('GET /api/cert/test error:', e)
    return NextResponse.json({ error: 'Ошибка сервера' }, { status: 500 })
  }
}

/* =========================
   ВОПРОСЫ ДЛЯ ВСЕХ ПОДКАТЕГОРИЙ
   ========================= */
/* =========================
   Пулы вопросов
   ========================= */
/* =========================
   Пулы вопросов
   ========================= */
function getQuestionsForSubcategory(name: string) {
  const q = (text: string, options: string[], correctIndex: number) => ({
    text,
    options: options.map((opt, i) => ({ text: opt, isCorrect: i === correctIndex })),
  })

  switch (name.trim().toLowerCase()) {
    /* =========================
       IT и программирование
       ========================= */

    case 'frontend':
      return [
        q('Почему важна декларативность в React?', [
          'Она упрощает понимание состояния интерфейса',
          'Она делает код быстрее на 30%',
          'Она заменяет необходимость Redux',
        ], 0),
        q('Что произойдет, если в React забыть key в списке?', [
          'Ошибки не будет, но обновления могут работать некорректно',
          'JSX не скомпилируется',
          'React удалит все элементы списка',
        ], 0),
        q('Какой хук используется для мемоизации вычислений?', [
          'useMemo',
          'useCallback',
          'useEffect',
        ], 0),
        q('Что делает Suspense?', [
          'Ожидает асинхронные компоненты и показывает фолбек',
          'Задерживает монтирование компонентов',
          'Останавливает hydration',
        ], 0),
        q('Что делает hydration в Next.js?', [
          'Объединяет серверный HTML с клиентским React',
          'Стирает состояние клиента при обновлении',
          'Перезапускает серверное рендеринг',
        ], 0),
        q('Почему важно использовать useEffect cleanup?', [
          'Чтобы избежать утечек памяти и старых подписок',
          'Чтобы ускорить useMemo',
          'Чтобы повторно вызывать setState',
        ], 0),
        q('Что делает React Fiber?', [
          'Разделяет рендеринг на части и планирует их выполнение',
          'Сжимает компоненты в один DOM-узел',
          'Кэширует весь UI в памяти браузера',
        ], 0),
        q('Что делает memo()?', [
          'Предотвращает ненужные перерендеры при одинаковых пропсах',
          'Сохраняет состояние в localStorage',
          'Создаёт новый компонент',
        ], 0),
        q('Что делает Context API?', [
          'Позволяет передавать данные без проп-дриллинга',
          'Подключает Redux',
          'Создаёт кэш JSX-компонентов',
        ], 0),
        q('Что делает метод setState?', [
          'Запускает ререндер с новым состоянием',
          'Меняет значение напрямую',
          'Сохраняет данные в cookies',
        ], 0),
      ]

    case 'backend':
      return [
        q('Почему важно использовать prepared statements?', [
          'Для защиты от SQL-инъекций',
          'Для ускорения фронтенда',
          'Для логирования ошибок',
        ], 0),
        q('Что делает middleware в Express?', [
          'Обрабатывает запрос до контроллера',
          'Проверяет синтаксис JSON',
          'Сжимает файлы',
        ], 0),
        q('Что делает Prisma при использовании $transaction?', [
          'Гарантирует атомарность операций с БД',
          'Создает резервную копию таблиц',
          'Выполняет SQL-пакеты асинхронно',
        ], 0),
        q('Что делает res.locals?', [
          'Передает данные между middleware',
          'Удаляет cookies',
          'Отправляет ответ клиенту',
        ], 0),
        q('Что делает статус 422?', [
          'Сообщает о неверных данных при валидации',
          'Означает таймаут запроса',
          'Говорит, что сервер перегружен',
        ], 0),
        q('Что делает ORM?', [
          'Позволяет работать с БД через объекты',
          'Отправляет почту пользователям',
          'Создает резервные копии файлов',
        ], 0),
        q('Что делает библиотека zod?', [
          'Валидирует схемы данных',
          'Создаёт кэш',
          'Измеряет производительность',
        ], 0),
        q('Зачем использовать status code 409?', [
          'Для конфликтов (например, при дублировании данных)',
          'Для отсутствия авторизации',
          'Для ошибок сервера',
        ], 0),
        q('Что делает JWT?', [
          'Хранит и подтверждает аутентификацию пользователя',
          'Кэширует ответы API',
          'Сжимает данные',
        ], 0),
        q('Что делает CORS?', [
          'Контролирует доступ между разными источниками',
          'Отключает HTTP-заголовки',
          'Фильтрует вредоносные запросы',
        ], 0),
      ]

    case 'fullstack':
      return [
        q('Что важно при интеграции фронта и бэка?', [
          'Согласованность контрактов API',
          'Единый фреймворк',
          'Минимум запросов',
        ], 0),
        q('Что делает SSR в Next.js?', [
          'Генерирует HTML на сервере перед отправкой клиенту',
          'Создает ZIP-архивы компонентов',
          'Кэширует HTML локально',
        ], 0),
        q('Почему важно не хранить состояние вне request scope?', [
          'Чтобы избежать утечек и пересечения данных между пользователями',
          'Чтобы ускорить CORS',
          'Чтобы SSR не зависел от клиента',
        ], 0),
        q('Что делает fetch() при SSR?', [
          'Делает серверный запрос без CORS-ограничений',
          'Вызывает клиентский event-loop',
          'Создаёт websocket',
        ], 0),
        q('Зачем нужен middleware.ts?', [
          'Для обработки запроса до маршрутов',
          'Для рендера компонентов',
          'Для шифрования токенов',
        ], 0),
        q('Почему стоит логировать 5xx отдельно от 4xx?', [
          'Чтобы различать ошибки клиента и сервера',
          'Чтобы экономить память',
          'Чтобы объединять их в JSON',
        ], 0),
        q('Что делает next/cache API?', [
          'Позволяет сохранять данные на уровне маршрута',
          'Сохраняет куки',
          'Меняет URL',
        ], 0),
        q('Что делает ISR (Incremental Static Regeneration)?', [
          'Обновляет статику после публикации без пересборки сайта',
          'Отключает кэш',
          'Переводит SSR в SPA',
        ], 0),
        q('Что делает API Route в Next.js?', [
          'Обрабатывает серверные запросы внутри проекта',
          'Создает билд-скрипты',
          'Обрабатывает только PUT-запросы',
        ], 0),
        q('Почему важно валидировать входящие данные на сервере?', [
          'Чтобы предотвратить инъекции и ошибки логики',
          'Чтобы ускорить SSR',
          'Чтобы уменьшить bundle',
        ], 0),
      ]

    case 'devops':
      return [
        q('Что делает Dockerfile?', [
          'Определяет сборку контейнера',
          'Хранит CI-пайплайны',
          'Создает виртуальную машину',
        ], 0),
        q('Что делает команда docker run?', [
          'Запускает контейнер из образа',
          'Удаляет сеть Docker',
          'Перезагружает хост',
        ], 0),
        q('Что делает kubectl apply?', [
          'Применяет манифест Kubernetes',
          'Удаляет pod',
          'Создает snapshot',
        ], 0),
        q('Что делает CI/CD?', [
          'Непрерывная интеграция и доставка кода',
          'Генерация статических страниц',
          'Сжатие ресурсов',
        ], 0),
        q('Что делает Prometheus?', [
          'Собирает метрики и следит за состоянием сервисов',
          'Разворачивает контейнеры',
          'Шифрует токены',
        ], 0),
        q('Что делает Terraform?', [
          'Управляет инфраструктурой как кодом',
          'Создает базы данных',
          'Проверяет логи',
        ], 0),
        q('Что делает Helm?', [
          'Менеджер пакетов Kubernetes',
          'Анализатор логов',
          'Планировщик cron-задач',
        ], 0),
        q('Что означает rollback?', [
          'Откат к стабильной версии деплоя',
          'Удаление всех контейнеров',
          'Перезапуск CI',
        ], 0),
        q('Что делает Ansible?', [
          'Автоматизирует конфигурации и деплой',
          'Проверяет логи',
          'Создает токены',
        ], 0),
        q('Что означает blue-green deployment?', [
          'Развертывание новой версии параллельно со старой',
          'Резервное копирование контейнеров',
          'Виртуализация CI',
        ], 0),
      ]

    case 'python':
      return [
        q('Что делает оператор with?', [
          'Автоматически закрывает ресурсы после блока кода',
          'Создает контекст в памяти',
          'Очищает переменные',
        ], 0),
        q('Что делает @staticmethod?', [
          'Создает метод, не требующий self',
          'Оптимизирует вызовы',
          'Очищает память',
        ], 0),
        q('Что делает yield?', [
          'Создает генератор вместо обычной функции',
          'Создает список в памяти',
          'Останавливает процесс',
        ], 0),
        q('Что делает list comprehension?', [
          'Создает список по выражению в одну строку',
          'Фильтрует дубликаты',
          'Создает JSON',
        ], 0),
        q('Что делает декоратор?', [
          'Изменяет поведение функции',
          'Создает класс',
          'Удаляет атрибуты',
        ], 0),
        q('Что делает typing.Optional?', [
          'Означает, что параметр может быть None',
          'Создает неизменяемое поле',
          'Добавляет комментарий',
        ], 0),
        q('Что делает asyncio?', [
          'Позволяет выполнять асинхронный код без блокировок',
          'Создает потоки ОС',
          'Перезапускает Python',
        ], 0),
        q('Что делает __init__.py?', [
          'Определяет пакет инициализации модуля',
          'Создает базу данных',
          'Запускает тесты',
        ], 0),
        q('Что делает pip freeze?', [
          'Выводит список установленных пакетов и версий',
          'Обновляет pip',
          'Удаляет кэш пакетов',
        ], 0),
        q('Что делает dataclass?', [
          'Автоматически создает методы __init__, __repr__, __eq__',
          'Добавляет абстрактный метод',
          'Оптимизирует байт-код',
        ], 0),
      ]

    case 'next.js':
      return [
        q('Что делает getServerSideProps?', [
          'Выполняет серверный код перед рендерингом страницы',
          'Создает API эндпоинт',
          'Оптимизирует bundle',
        ], 0),
        q('Что делает useRouter?', [
          'Позволяет управлять маршрутизацией на клиенте',
          'Создает SSR-запрос',
          'Перезагружает страницу',
        ], 0),
        q('Что делает dynamic import?', [
          'Позволяет подгружать компоненты лениво',
          'Создает новый layout',
          'Удаляет client bundle',
        ], 0),
        q('Что делает app router?', [
          'Заменяет старую систему pages/ и поддерживает серверные компоненты',
          'Добавляет SSR в API',
          'Запускает build автоматически',
        ], 0),
        q('Что делает middleware.ts?', [
          'Обрабатывает запросы до рендера страницы',
          'Создает layout',
          'Форматирует HTML',
        ], 0),
        q('Что делает generateStaticParams?', [
          'Создает список путей для статической генерации',
          'Собирает динамические роуты в JSON',
          'Удаляет страницы из билда',
        ], 0),
        q('Что делает revalidate в fetch?', [
          'Определяет время кэширования данных',
          'Очищает кэш',
          'Создает новый роут',
        ], 0),
        q('Что делает серверный компонент?', [
          'Рендерится на сервере и не содержит client hook-ов',
          'Выполняется только в браузере',
          'Имеет доступ к localStorage',
        ], 0),
        q('Что делает next/image?', [
          'Оптимизирует изображения и подгружает адаптивные форматы',
          'Создает галерею',
          'Конвертирует PNG в SVG',
        ], 0),
        q('Что делает next/link?', [
          'Позволяет переходить между страницами без перезагрузки',
          'Создает SSR роут',
          'Удаляет кеш роутов',
        ], 0),
      ]

    case 'wordpress / cms':
      return [
        q('Что делает файл functions.php в WordPress?', [
          'Содержит пользовательские функции и хуки темы',
          'Отвечает за SEO-настройки сайта',
          'Сохраняет данные плагинов в базе',
        ], 0),
        q('Что делает action hook init?', [
          'Вызывается при инициализации WordPress, до загрузки шаблонов',
          'Запускает только cron-задачи',
          'Используется для очистки кэша базы данных',
        ], 0),
        q('Что делает WP_Query?', [
          'Создает кастомные выборки постов',
          'Обновляет плагины',
          'Отправляет данные на сервер',
        ], 0),
        q('Что делает shortcode?', [
          'Вставляет динамический контент в посты и страницы',
          'Создает шаблон темы',
          'Отключает плагины',
        ], 0),
        q('Что делает REST API WordPress?', [
          'Позволяет получать и отправлять данные сайта через JSON',
          'Создает XML-файлы',
          'Подключает внешние темы',
        ], 0),
        q('Где хранятся настройки сайта?', [
          'В таблице wp_options',
          'В wp_users',
          'В wp_meta',
        ], 0),
        q('Что делает filter hook?', [
          'Позволяет изменять данные перед выводом или сохранением',
          'Создает новую страницу',
          'Подключает middleware',
        ], 0),
        q('Что делает child theme?', [
          'Позволяет переопределять шаблоны родительской темы',
          'Создает резервную копию сайта',
          'Изолирует плагины',
        ], 0),
        q('Что делает wp_enqueue_script?', [
          'Добавляет JS-файлы в шаблон корректно',
          'Удаляет старые стили',
          'Добавляет HTML-теги',
        ], 0),
        q('Что делает permalinks?', [
          'Определяют формат URL страниц',
          'Создают меню навигации',
          'Формируют sitemap.xml',
        ], 0),
      ]

    case 'ai / ml / нейросети':
      return [
        q('Что такое переобучение модели?', [
          'Когда модель запоминает обучающие данные и теряет обобщение',
          'Когда модель не обучается вовсе',
          'Когда модель использует неправильный алгоритм',
        ], 0),
        q('Что делает функция потерь (loss function)?', [
          'Измеряет ошибку между предсказанием и реальностью',
          'Сохраняет веса модели',
          'Отбирает лучшие данные',
        ], 0),
        q('Что делает градиентный спуск?', [
          'Оптимизирует веса модели, уменьшая ошибку',
          'Создает новые данные для обучения',
          'Проверяет точность модели',
        ], 0),
        q('Что такое эпоха обучения?', [
          'Полный проход по всему датасету',
          'Одна итерация обратного распространения',
          'Только часть данных',
        ], 0),
        q('Что делает слой Dropout?', [
          'Отключает случайные нейроны для предотвращения переобучения',
          'Создает резервную копию модели',
          'Увеличивает скорость обучения',
        ], 0),
        q('Что делает One-Hot Encoding?', [
          'Преобразует категориальные данные в бинарный формат',
          'Уменьшает размер датасета',
          'Фильтрует выбросы',
        ], 0),
        q('Что делает функция softmax?', [
          'Преобразует выходные значения в вероятности',
          'Создает новые нейроны',
          'Удаляет нулевые веса',
        ], 0),
        q('Что делает batch normalization?', [
          'Нормализует входные данные между слоями для стабильности',
          'Ускоряет backpropagation за счет кеширования',
          'Увеличивает dropout',
        ], 0),
        q('Что делает обучение с учителем?', [
          'Использует размеченные данные для обучения',
          'Проводится без меток',
          'Создает псевдоразметку',
        ], 0),
        q('Что делает оптимизатор Adam?', [
          'Комбинирует преимущества RMSProp и Momentum для обучения',
          'Использует случайные веса',
          'Удаляет шум из данных',
        ], 0),
      ]

    case 'тестирование и qa':
      return [
        q('Что такое unit-тест?', [
          'Тестирует отдельную функцию или модуль системы',
          'Проверяет UI целиком',
          'Иммитирует работу БД',
        ], 0),
        q('Что делает мок (mock)?', [
          'Иммитирует поведение зависимостей для теста',
          'Генерирует реальные API запросы',
          'Проверяет визуальный дизайн',
        ], 0),
        q('Что такое интеграционный тест?', [
          'Проверяет взаимодействие между компонентами системы',
          'Проверяет орфографию в интерфейсе',
          'Оценивает скорость загрузки страницы',
        ], 0),
        q('Что делает end-to-end тест?', [
          'Проходит через весь путь пользователя',
          'Тестирует отдельный компонент',
          'Проверяет только API',
        ], 0),
        q('Что делает snapshot-тест?', [
          'Сравнивает текущее состояние UI с эталонным снимком',
          'Проверяет CSS-анимации',
          'Сохраняет cookie-файлы',
        ], 0),
        q('Что делает CI при тестировании?', [
          'Автоматически запускает тесты при каждом пуше',
          'Отправляет отчеты пользователю',
          'Создает базы данных',
        ], 0),
        q('Что делает Jest?', [
          'Фреймворк для unit и snapshot тестирования',
          'Библиотека визуализации графиков',
          'Система логирования',
        ], 0),
        q('Что делает Mock Service Worker?', [
          'Перехватывает запросы и имитирует ответы API',
          'Создает локальный сервер',
          'Удаляет куки',
        ], 0),
        q('Что такое flaky-тест?', [
          'Тест, который иногда проходит, а иногда падает без причины',
          'Тест на флаги и переменные',
          'Юнит-тест без зависимостей',
        ], 0),
        q('Что делает coverage report?', [
          'Показывает процент кода, покрытого тестами',
          'Создает html отчет об ошибках',
          'Запускает тесты параллельно',
        ], 0),
      ]

    case 'телеграм-боты':
      return [
        q('Что делает Telegram Bot API?', [
          'Позволяет боту взаимодействовать с пользователями через HTTP-запросы',
          'Запускает бот на сервере Telegram',
          'Создает интерфейс Telegram',
        ], 0),
        q('Что делает webhook?', [
          'Позволяет Telegram отправлять обновления боту напрямую на сервер',
          'Проверяет токен бота',
          'Отключает обновления',
        ], 0),
        q('Что делает polling?', [
          'Периодически запрашивает новые сообщения у Telegram',
          'Создает сокет-соединение',
          'Загружает фото пользователей',
        ], 0),
        q('Что делает команда /start?', [
          'Начинает сессию пользователя с ботом',
          'Удаляет все чаты',
          'Активирует логирование',
        ], 0),
        q('Что делает метод sendMessage?', [
          'Отправляет текстовое сообщение пользователю',
          'Сохраняет фото на сервере',
          'Удаляет чат',
        ], 0),
        q('Что делает inline keyboard?', [
          'Создает кнопки прямо в сообщении',
          'Добавляет меню в настройки бота',
          'Отправляет callback',
        ], 0),
        q('Что делает callback_query?', [
          'Передает данные при нажатии кнопок inline keyboard',
          'Удаляет клавиатуру',
          'Загружает аватар',
        ], 0),
        q('Что делает API method getMe?', [
          'Возвращает информацию о самом боте',
          'Удаляет токен',
          'Останавливает webhook',
        ], 0),
        q('Что делает BotFather?', [
          'Создает и управляет ботами Telegram',
          'Модерирует чаты',
          'Проверяет токены пользователей',
        ], 0),
        q('Что делает message.chat.id?', [
          'Определяет уникальный ID чата для ответа',
          'Содержит имя пользователя',
          'Хранит HTML сообщения',
        ], 0),
      ]

    case 'интеграции api':
      return [
        q('Что делает OAuth 2.0?', [
          'Позволяет пользователям авторизоваться через сторонние сервисы',
          'Шифрует данные в запросах',
          'Сохраняет токены в cookies',
        ], 0),
        q('Что делает refresh token?', [
          'Позволяет получить новый access token без повторной авторизации',
          'Удаляет старый токен',
          'Хранит данные пользователя',
        ], 0),
        q('Что делает rate limiting?', [
          'Ограничивает количество запросов за определённое время',
          'Увеличивает скорость API',
          'Удаляет сессии пользователей',
        ], 0),
        q('Что делает JSON Web Token?', [
          'Передаёт зашифрованную информацию об авторизации',
          'Создает кэш запросов',
          'Шифрует базу данных',
        ], 0),
        q('Что делает API Gateway?', [
          'Централизует маршрутизацию, аутентификацию и лимиты API',
          'Создает SQL-запросы',
          'Оптимизирует HTML',
        ], 0),
        q('Что делает OpenAPI (Swagger)?', [
          'Документирует и описывает API',
          'Запускает тесты UI',
          'Создает мок-серверы',
        ], 0),
        q('Что делает webhook?', [
          'Асинхронно уведомляет систему о событиях',
          'Запускает API-запрос каждые 5 секунд',
          'Удаляет данные из базы',
        ], 0),
        q('Что делает API key?', [
          'Определяет и аутентифицирует клиента',
          'Создает сессии',
          'Кэширует ответы',
        ], 0),
        q('Что делает RESTful API?', [
          'Использует HTTP-методы для управления ресурсами',
          'Передает данные в бинарном формате',
          'Требует постоянное соединение',
        ], 0),
        q('Что делает GraphQL?', [
          'Позволяет клиенту запрашивать только нужные поля данных',
          'Создает SQL-запросы автоматически',
          'Использует XML-структуры',
        ], 0),
      ]

    case 'игровая разработка':
      return [
        q('Что делает игровой цикл (game loop)?', [
          'Обновляет состояние игры и рендерит кадры',
          'Запускает только звук',
          'Хранит текстуры в памяти',
        ], 0),
        q('Что делает движок Unity?', [
          'Позволяет разрабатывать 2D и 3D игры с C#',
          'Использует Java для игр',
          'Создает браузерные плагины',
        ], 0),
        q('Что делает физический движок?', [
          'Рассчитывает столкновения и движение объектов',
          'Отвечает за музыку',
          'Создает UI элементы',
        ], 0),
        q('Что делает prefab?', [
          'Шаблон объекта, который можно клонировать в сцене',
          'Файл сохранений',
          'Рендер-скрипт',
        ], 0),
        q('Что делает Render Pipeline?', [
          'Определяет способ визуализации графики',
          'Управляет аудио',
          'Оптимизирует текстуры',
        ], 0),
        q('Что делает компонент Rigidbody?', [
          'Добавляет физику телу и реагирует на силы',
          'Удаляет объекты при столкновении',
          'Сохраняет позиции в JSON',
        ], 0),
        q('Что делает collider?', [
          'Определяет форму столкновения объекта',
          'Создает анимации',
          'Рендерит текстуры',
        ], 0),
        q('Что делает scriptable object?', [
          'Хранит общие данные, не зависящие от сцены',
          'Создает модели персонажей',
          'Ускоряет fps',
        ], 0),
        q('Что делает event system?', [
          'Обрабатывает пользовательский ввод и события',
          'Рисует интерфейс',
          'Управляет памятью',
        ], 0),
        q('Что делает deltaTime?', [
          'Отражает время между кадрами для плавного движения',
          'Определяет размер окна',
          'Хранит FPS',
        ], 0),
      ]

    case 'скрипты и автоматизация':
      return [
        q('Что делает cron?', [
          'Планирует выполнение задач по расписанию',
          'Очищает логи',
          'Создает резервные копии',
        ], 0),
        q('Что делает bash pipe (|)?', [
          'Передает результат одной команды в другую',
          'Объединяет два файла',
          'Создает alias',
        ], 0),
        q('Что делает grep?', [
          'Ищет строки по шаблону в файлах',
          'Удаляет файлы по маске',
          'Создает архив',
        ], 0),
        q('Что делает awk?', [
          'Обрабатывает текстовые потоки и данные построчно',
          'Компилирует код',
          'Вызывает API',
        ], 0),
        q('Что делает sed?', [
          'Редактирует текст в потоке с заменами по шаблону',
          'Создает временные файлы',
          'Переименовывает каталоги',
        ], 0),
        q('Что делает chmod +x?', [
          'Делает файл исполняемым',
          'Удаляет атрибут файла',
          'Создает cron-задачу',
        ], 0),
        q('Что делает tmux?', [
          'Позволяет запускать несколько сессий терминала в одном окне',
          'Создает docker контейнеры',
          'Проверяет порты',
        ], 0),
        q('Что делает ssh-keygen?', [
          'Создает пару ключей для SSH аутентификации',
          'Запускает ssh-сессию',
          'Шифрует файл',
        ], 0),
        q('Что делает rsync?', [
          'Синхронизирует файлы между системами по сети',
          'Проверяет целостность файлов',
          'Создает tar-архив',
        ], 0),
        q('Что делает nohup?', [
          'Позволяет процессу продолжать работу после выхода из сессии',
          'Останавливает cron',
          'Удаляет временные файлы',
        ], 0),
      ]
 
default:
      return []
  }
}

// app/api/my-tasks/route.ts

import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

export async function GET(req: Request) {
  try {
    const user = await getUserFromRequest(req)

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ')
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: user.id,
      role: user.role,
      email: user.email,
    })

    // --- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å ---
    if (user.role !== 'executor') {
      console.warn(`‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –†–æ–ª—å: ${user.role}`)
      return NextResponse.json({ error: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π' }, { status: 403 })
    }

    // --- –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ ---
    const tasks = await prisma.task.findMany({
      where: {
        executorId: user.id,
      },
      include: {
        customer: {
          select: { fullName: true, email: true },
        },
      },
      orderBy: { createdAt: 'desc' },
    })

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`)
    if (tasks.length === 0) {
      console.log('‚ÑπÔ∏è –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, executorId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î.')
    } else {
      console.log('‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:', tasks.slice(0, 2).map(t => ({
        id: t.id,
        title: t.title,
        status: t.status,
        executorId: t.executorId,
      })))
    }

    return NextResponse.json({ tasks })
  } catch (err: any) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', err)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á', details: err.message },
      { status: 500 }
    )
  }
}

import { sendNotificationToUser } from '@/app/api/notifications/stream/route'
import { getUserFromRequest } from '@/lib/auth'
import { createNotification } from '@/lib/notify'
import prisma from '@/lib/prisma'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {
	const { pathname } = req.nextUrl
	const idMatch = pathname.match(/\/api\/tasks\/([^/]+)\/responses/)
	const taskId = idMatch?.[1]

	if (!taskId) {
		return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å' }, { status: 400 })
	}

	const user = await getUserFromRequest(req)
	if (!user)
		return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

	const { message, price } = await req.json()

	const task = await prisma.task.findUnique({
		where: { id: taskId },
		include: {
			subcategory: {
				select: {
					minPrice: true,
				},
			},
		},
	})

	if (!task) {
		return NextResponse.json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
	}

	if (task.status !== 'open') {
		return NextResponse.json(
			{ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤' },
			{ status: 400 }
		)
	}

	const existing = await prisma.taskResponse.findFirst({
		where: {
			taskId,
			userId: user.id,
		},
	})

	if (existing) {
		return NextResponse.json({ error: '–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å' }, { status: 400 })
	}

	// üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
	const minPrice = task.subcategory?.minPrice ?? 0
	if (price < minPrice) {
		return NextResponse.json(
			{ error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî ${minPrice}‚ÇΩ` },
			{ status: 400 }
		)
	}

	const response = await prisma.taskResponse.create({
		data: {
			taskId,
			userId: user.id,
			message,
			price,
		},
	})

	// üîî –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –∑–∞–¥–∞—á–∏
	await createNotification({
		userId: task.customerId,
		message: `${user.fullName || user.email} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –∑–∞–¥–∞—á—É "${
			task.title
		}"`,
		link: `/tasks/${task.id}`,
		type: 'response',
	})

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	sendNotificationToUser(task.customerId, {
		type: 'response',
		title: '–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–¥–∞—á—É',
		message: `${user.fullName || user.email} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –∑–∞–¥–∞—á—É "${
			task.title
		}"`,
		link: `/tasks/${task.id}`,
		taskTitle: task.title,
		senderId: user.id,
		sender: user.fullName || user.email,
		playSound: true,
	})

	return NextResponse.json({ response })
}

// app/api/tasks/[id]/complete/route.ts
import { sendNotificationToUser } from '@/app/api/notifications/stream/route'
import { getUserFromRequest } from '@/lib/auth'
import { formatMoney, toNumber } from '@/lib/money'
import prisma from '@/lib/prisma'
import { Prisma } from '@prisma/client'
import { NextRequest, NextResponse } from 'next/server'

export async function PATCH(req: NextRequest, { params }: any) {
	try {
		const { id } = params
		const user = await getUserFromRequest(req)
		if (!user)
			return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

		const task = await prisma.task.findUnique({
			where: { id },
			select: {
				id: true,
				title: true,
				customerId: true,
				executorId: true,
				status: true,
				escrowAmount: true,
			},
		})

		if (!task)
			return NextResponse.json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
		if (task.customerId !== user.id)
			return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' }, { status: 403 })
		if (task.status !== 'in_progress')
			return NextResponse.json(
				{ error: '–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç–µ' },
				{ status: 400 }
			)
		if (!task.executorId)
			return NextResponse.json(
				{ error: '–£ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' },
				{ status: 400 }
			)

		// –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é 20% –∏ –≤—ã–ø–ª–∞—Ç—É
		const escrowNum = toNumber(task.escrowAmount)
		const commission = Math.floor(escrowNum * 100 * 0.2) / 100 // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫–æ–ø–µ–µ–∫
		const payout = escrowNum - commission

		const commissionDecimal = new Prisma.Decimal(commission)
		const payoutDecimal = new Prisma.Decimal(payout)

		// üí∞ –ü–æ–ª—É—á–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ env
		const platformOwnerId = process.env.PLATFORM_OWNER_ID

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
		const ownerTransactions = []
		if (platformOwnerId) {
			ownerTransactions.push(
				prisma.user.update({
					where: { id: platformOwnerId },
					data: {
						balance: { increment: commissionDecimal },
						transactions: {
							create: {
								amount: commissionDecimal,
								type: 'commission',
								reason: `–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 20% —Å –∑–∞–¥–∞—á–∏ "${task.title}"`,
							},
						},
					},
				})
			)
		} else {
			console.warn(
				'‚ö†Ô∏è PLATFORM_OWNER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ö–æ–º–∏—Å—Å–∏—è –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞.'
			)
		}

		await prisma.$transaction([
			// –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
			prisma.task.update({
				where: { id: task.id },
				data: {
					status: 'completed',
					completedAt: new Date(),
					escrowAmount: new Prisma.Decimal(0),
				},
			}),

			// –£ –∑–∞–∫–∞–∑—á–∏–∫–∞: —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –∏ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º
			prisma.user.update({
				where: { id: task.customerId },
				data: {
					balance: { decrement: new Prisma.Decimal(escrowNum) },
					frozenBalance: { decrement: new Prisma.Decimal(escrowNum) },
					transactions: {
						create: [
							{
								amount: new Prisma.Decimal(-escrowNum),
								type: 'payment',
								reason: `–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–¥–∞—á—É "${task.title}"`,
							},
							{
								amount: new Prisma.Decimal(-commission),
								type: 'commission',
								reason: `–ö–æ–º–∏—Å—Å–∏—è 20% —Å –∑–∞–¥–∞—á–∏ "${task.title}"`,
							},
						],
					},
				},
			}),

			// –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: –Ω–∞—á–∏—Å–ª—è–µ–º –≤—ã–ø–ª–∞—Ç—É (80%)
			prisma.user.update({
				where: { id: task.executorId },
				data: {
					balance: { increment: payoutDecimal },
					transactions: {
						create: {
							amount: payoutDecimal,
							type: 'earn',
							reason: `–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–¥–∞—á—É "${task.title}"`,
						},
					},
				},
			}),

			// üí∞ –í–ª–∞–¥–µ–ª—å—Ü—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: –Ω–∞—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é (20%)
			...ownerTransactions,

			// –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
			prisma.notification.create({
				data: {
					userId: task.executorId,
					type: 'payment',
					message: `–ó–∞–¥–∞—á–∞ "${
						task.title
					}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${formatMoney(payout)}`,
					link: `/tasks/${task.id}`,
				},
			}),
		])

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
		sendNotificationToUser(task.executorId, {
			type: 'payment',
			title: '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
			message: `–ó–∞–¥–∞—á–∞ "${task.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${formatMoney(
				payout
			)}`,
			link: `/tasks/${task.id}`,
			taskTitle: task.title,
			amount: payout,
			playSound: true,
		})

		return NextResponse.json({ success: true })
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err)
		return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
	}
}

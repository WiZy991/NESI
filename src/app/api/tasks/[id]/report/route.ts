import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

export async function POST(
	req: Request,
	{ params }: { params: Promise<{ id: string }> }
) {
	try {
		console.log('üìù –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã')
		
		const user = await getUserFromRequest(req)
		if (!user) {
			console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
			return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
		}

		const { id: taskId } = await params
		console.log('üéØ Task ID:', taskId)
		
		const { reason, description } = await req.json()
		console.log('üìã Reason:', reason, 'Description:', description)

		if (!reason || !reason.trim()) {
			return NextResponse.json(
				{ error: '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã' },
				{ status: 400 }
			)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
		const task = await prisma.task.findUnique({
			where: { id: taskId },
		})

		if (!task) {
			return NextResponse.json(
				{ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
				{ status: 404 }
			)
		}

		// –°–æ–∑–¥–∞—ë–º –∂–∞–ª–æ–±—É
		console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –≤ –ë–î...')
		const report = await prisma.communityReport.create({
			data: {
				type: 'task',
				taskId: taskId,
				reason,
				description: description?.trim() || null,
				reporterId: user.id,
			},
		})

		console.log('‚úÖ –ñ–∞–ª–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∞:', report.id)
		return NextResponse.json(
			{ success: true, report },
			{ status: 201 }
		)
	} catch (error: any) {
		console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã:', error)
		console.error('Stack:', error.stack)
		return NextResponse.json(
			{ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + (error.message || String(error)) },
			{ status: 500 }
		)
	}
}


// app/api/tasks/[id]/assign/route.ts
import { getUserFromRequest } from '@/lib/auth'
import { formatMoney, hasEnoughBalance, toNumber } from '@/lib/money'
import prisma from '@/lib/prisma'
import { Prisma } from '@prisma/client'
import { NextResponse } from 'next/server'

export async function POST(req: Request, context: { params: { id: string } }) {
	try {
		const user = await getUserFromRequest(req)
		if (!user)
			return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

		const { id: taskId } = context.params
		const { executorId } = await req.json()

		const task = await prisma.task.findUnique({ where: { id: taskId } })
		if (!task)
			return NextResponse.json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })

		if (task.customerId !== user.id) {
			return NextResponse.json(
				{ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' },
				{ status: 403 }
			)
		}

		if (task.executorId) {
			return NextResponse.json(
				{ error: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω' },
				{ status: 400 }
			)
		}

		// –ë–µ—Ä—ë–º —Ü–µ–Ω—É –æ—Ç–∫–ª–∏–∫–∞ –ø–æ –ø–∞—Ä–µ (taskId + executorId)
		const response = await prisma.taskResponse.findFirst({
			where: { taskId, userId: executorId },
		})

		if (!response || !response.price) {
			return NextResponse.json(
				{ error: '–û—Ç–∫–ª–∏–∫ –∏–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
				{ status: 400 }
			)
		}

		const price = response.price

		// üî• –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ü–ï–†–ï–î –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
		const customer = await prisma.user.findUnique({
			where: { id: user.id },
			select: { balance: true, frozenBalance: true },
		})

		if (!customer) {
			return NextResponse.json(
				{ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
				{ status: 404 }
			)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
		if (!hasEnoughBalance(customer.balance, customer.frozenBalance, price)) {
			const available =
				toNumber(customer.balance) - toNumber(customer.frozenBalance)
			return NextResponse.json(
				{
					error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
					details: `–¢—Ä–µ–±—É–µ—Ç—Å—è: ${formatMoney(price)}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${formatMoney(
						available
					)}`,
					required: toNumber(price),
					available: available,
				},
				{ status: 400 }
			)
		}

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Prisma Decimal –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		const priceDecimal = new Prisma.Decimal(toNumber(price))

		await prisma.$transaction([
			// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
			prisma.task.update({
				where: { id: taskId },
				data: {
					executorId,
					status: 'in_progress',
					escrowAmount: priceDecimal, // üí∞ —Å—É–º–º–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏
				},
			}),

			// –£ –∑–∞–∫–∞–∑—á–∏–∫–∞: —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –º–æ—Ä–æ–∑–∏–º
			prisma.user.update({
				where: { id: user.id },
				data: {
					balance: { decrement: priceDecimal },
					frozenBalance: { increment: priceDecimal },
					transactions: {
						create: {
							amount: new Prisma.Decimal(-toNumber(price)),
							type: 'freeze',
							reason: `–ó–∞–º–æ—Ä–æ–∑–∫–∞ ${formatMoney(price)} –¥–ª—è –∑–∞–¥–∞—á–∏ "${
								task.title
							}"`,
						},
					},
				},
			}),
		])

		return NextResponse.json({ success: true })
	} catch (err) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', err)
		return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
	}
}

// app/api/tasks/[id]/assign/route.ts
import { NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'

export async function POST(
  req: Request,
  context: { params: { id: string } }
) {
  try {
    const user = await getUserFromRequest(req)
    if (!user) return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

    const { id: taskId } = context.params
    const { executorId } = await req.json()

    const task = await prisma.task.findUnique({ where: { id: taskId } })
    if (!task) return NextResponse.json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })

    if (task.customerId !== user.id) {
      return NextResponse.json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' }, { status: 403 })
    }

    if (task.executorId) {
      return NextResponse.json({ error: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω' }, { status: 400 })
    }

    // –ë–µ—Ä—ë–º —Ü–µ–Ω—É –æ—Ç–∫–ª–∏–∫–∞ –ø–æ –ø–∞—Ä–µ (taskId + executorId)
    const response = await prisma.taskResponse.findFirst({
      where: { taskId, userId: executorId },
    })

    if (!response || !response.price) {
      return NextResponse.json({ error: '–û—Ç–∫–ª–∏–∫ –∏–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' }, { status: 400 })
    }

    const price = response.price

    await prisma.$transaction([
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      prisma.task.update({
        where: { id: taskId },
        data: {
          executorId,
          status: 'in_progress',
          escrowAmount: price, // üí∞ —Å—É–º–º–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏
        },
      }),

      // –£ –∑–∞–∫–∞–∑—á–∏–∫–∞: —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –º–æ—Ä–æ–∑–∏–º
      prisma.user.update({
        where: { id: user.id },
        data: {
          balance: { decrement: price },
          frozenBalance: { increment: price },
          transactions: {
            create: {
              amount: -price,
              type: 'freeze',
              reason: `–ó–∞–º–æ—Ä–æ–∑–∫–∞ ${price} NESI –¥–ª—è –∑–∞–¥–∞—á–∏ "${task.title}"`,
            },
          },
        },
      }),
    ])

    return NextResponse.json({ success: true })
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}

import { getUserFromRequest } from '@/lib/auth'
import prisma from '@/lib/prisma'
import { NextResponse } from 'next/server'

// üì¶ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(req: Request) {
	const user = await getUserFromRequest(req)
	if (!user)
		return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

	const disputes = await (prisma as any).dispute.findMany({
		where: { userId: user.id },
		include: {
			Task: {
				select: { id: true, title: true, status: true },
			},
		},
		orderBy: { createdAt: 'desc' },
	})

	return NextResponse.json({ disputes })
}

// ‚ö° –°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä –ø–æ –∑–∞–¥–∞—á–µ
export async function POST(req: Request) {
	const user = await getUserFromRequest(req)
	if (!user)
		return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

	const { taskId, reason, details } = await req.json()

	if (!taskId || !reason) {
		return NextResponse.json({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' }, { status: 400 })
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∑–∞–¥–∞—á–µ–π
	const task = await prisma.task.findFirst({
		where: {
			id: taskId,
			OR: [{ customerId: user.id }, { executorId: user.id }],
		},
	})

	if (!task) {
		return NextResponse.json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–µ' }, { status: 403 })
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ø–æ—Ä –ø–æ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ
	const existing = await (prisma as any).dispute.findFirst({
		where: { taskId },
	})
	if (existing) {
		return NextResponse.json({ error: '–°–ø–æ—Ä —É–∂–µ —Å–æ–∑–¥–∞–Ω' }, { status: 400 })
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–æ—Ä
	const dispute = await (prisma as any).dispute.create({
		data: {
			id: `dispute_${taskId}_${Date.now()}`,
			taskId,
			userId: user.id,
			reason,
			details,
			status: 'open',
		},
	})

	return NextResponse.json({ dispute })
}

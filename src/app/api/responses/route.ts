import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import { getUserFromRequest } from '@/lib/auth'
import { hasActiveTask } from '@/lib/guards'

export async function POST(req: NextRequest) {
  const me = await getUserFromRequest(req)
  if (!me) return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })

  if (me.role !== 'executor') {
    return NextResponse.json({ error: '–¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è' }, { status: 403 })
  }

  const body = await req.json().catch(() => ({}))
  const { taskId, message, price } = body || {}
  if (!taskId) {
    return NextResponse.json({ error: 'taskId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 })
  }

  // üîí –ì–ê–†–î: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?
  if (await hasActiveTask(me.id)) {
    return NextResponse.json(
      { error: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Å–ª–µ–¥—É—é—â—É—é.' },
      { status: 409 }
    )
  }

  // --- –¥–∞–ª—å—à–µ —Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏/–º–∏–Ω–∏–º–∞–ª–æ–∫/–¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Ç.–ø. ---
  // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–∫—Ä—ã—Ç–∞
  const task = await prisma.task.findUnique({
    where: { id: taskId },
    select: { id: true, status: true },
  })
  if (!task) return NextResponse.json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
  if (task.status !== 'open') {
    return NextResponse.json({ error: '–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤' }, { status: 400 })
  }

  // –ù–µ –¥–∞—ë–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–∫–ª–∏–∫ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç—É –∂–µ –∑–∞–¥–∞—á—É
  const exists = await prisma.taskResponse.findUnique({
    where: { taskId_userId: { taskId, userId: me.id } },
  })
  if (exists) {
    return NextResponse.json({ error: '–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É' }, { status: 409 })
  }

  const created = await prisma.taskResponse.create({
    data: {
      taskId,
      userId: me.id,
      message: message ?? null,
      price: price ?? null,
    },
  })

  return NextResponse.json(created, { status: 201 })
}

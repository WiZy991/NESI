import { getUserFromToken } from '@/lib/auth'
import { NextRequest } from 'next/server'

export async function GET(req: NextRequest) {
	const url = new URL(req.url)
	const token = url.searchParams.get('token')

	if (!token) {
		return new Response('Unauthorized', { status: 401 })
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
	const user = await getUserFromToken(token)
	if (!user) {
		return new Response('Unauthorized', { status: 401 })
	}

	console.log('üîî SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è Server-Sent Events
	const stream = new ReadableStream({
		start(controller) {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
			const data = JSON.stringify({
				type: 'connected',
				message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º',
				timestamp: new Date().toISOString(),
			})

			controller.enqueue(`data: ${data}\n\n`)

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
			global.sseConnections = global.sseConnections || new Map()
			global.sseConnections.set(user.id, controller)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
			const heartbeatInterval = setInterval(() => {
				try {
					const heartbeatData = JSON.stringify({
						type: 'heartbeat',
						timestamp: new Date().toISOString(),
					})
					controller.enqueue(`data: ${heartbeatData}\n\n`)
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat:', error)
					clearInterval(heartbeatInterval)
					global.sseConnections?.delete(user.id)
				}
			}, 30000)

			// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
			req.signal.addEventListener('abort', () => {
				console.log('üîå SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)
				clearInterval(heartbeatInterval)
				global.sseConnections?.delete(user.id)
				controller.close()
			})
		},
		cancel() {
			console.log('üîå SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id)
			global.sseConnections?.delete(user.id)
		},
	})

	return new Response(stream, {
		headers: {
			'Content-Type': 'text/event-stream',
			'Cache-Control': 'no-cache',
			Connection: 'keep-alive',
			'Access-Control-Allow-Origin': '*',
			'Access-Control-Allow-Headers': 'Cache-Control',
		},
	})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export function sendNotificationToUser(userId: string, notification: any) {
	const connections = global.sseConnections
	if (!connections || !connections.has(userId)) {
		console.log('üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ SSE:', userId)
		return false
	}

	try {
		const controller = connections.get(userId)
		const data = JSON.stringify({
			type: 'message',
			...notification,
			timestamp: new Date().toISOString(),
		})

		controller.enqueue(`data: ${data}\n\n`)
		console.log('üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId)
		return true
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
		connections.delete(userId)
		return false
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
export function broadcastNotification(notification: any) {
	const connections = global.sseConnections
	if (!connections) return

	console.log('üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')

	for (const [userId, controller] of connections) {
		try {
			const data = JSON.stringify({
				type: 'broadcast',
				...notification,
				timestamp: new Date().toISOString(),
			})

			controller.enqueue(`data: ${data}\n\n`)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
			connections.delete(userId)
		}
	}
}

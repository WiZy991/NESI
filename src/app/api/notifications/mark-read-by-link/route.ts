// src/app/api/notifications/mark-read-by-link/route.ts
import { getUserFromRequest } from '@/lib/auth'
import prisma from '@/lib/prisma'
import { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {
	const user = await getUserFromRequest(req)
	if (!user) {
		return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
	}

	try {
		const { link } = await req.json()

		if (!link) {
			return NextResponse.json(
				{ error: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞' },
				{ status: 400 }
			)
		}

		console.log('üìñ –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Å—Å—ã–ª–∫–µ:', {
			userId: user.id,
			link,
		})

		// –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π
		const deletedNotifications = await prisma.notification.deleteMany({
			where: {
				userId: user.id,
				link,
			},
		})

		console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${deletedNotifications.count}`)
		
		return NextResponse.json({ 
			success: true,
			deletedNotifications: deletedNotifications.count
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
		return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
	}
}


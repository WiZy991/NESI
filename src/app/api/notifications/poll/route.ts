// src/app/api/notifications/poll/route.ts
// API –¥–ª—è polling —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (fallback –¥–ª—è SSE)
import { getUserFromRequest } from '@/lib/auth'
import prisma from '@/lib/prisma'
import { NextRequest, NextResponse } from 'next/server'

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'

export async function GET(req: NextRequest) {
	const user = await getUserFromRequest(req)
	if (!user) {
		return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
	}

	const { searchParams } = new URL(req.url)
	const sinceParam = searchParams.get('since')

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞, –±–µ—Ä–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ—ë
	const since = sinceParam ? new Date(sinceParam) : new Date(Date.now() - 10000) // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥

	try {
		// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		const notifications = await prisma.notification.findMany({
			where: {
				userId: user.id,
				createdAt: {
					gt: since,
				},
			},
			orderBy: {
				createdAt: 'desc',
			},
			take: 20, // –º–∞–∫—Å–∏–º—É–º 20 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
		})

		console.log(`üì° Polling: –Ω–∞–π–¥–µ–Ω–æ ${notifications.length} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`)

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å SSE
		const formattedNotifications = notifications.map(n => ({
			type: n.type || 'notification',
			title: getNotificationTitle(n.type || 'notification'),
			message: n.message,
			link: n.link,
			timestamp: n.createdAt.toISOString(),
			playSound: true,
		}))

		return NextResponse.json({
			notifications: formattedNotifications,
			count: notifications.length,
		})
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ polling —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
		return NextResponse.json(
			{ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
			{ status: 500 }
		)
	}
}

function getNotificationTitle(type: string): string {
	const titles: Record<string, string> = {
		message: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
		response: '–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫',
		hire: '–í–∞—Å –Ω–∞–Ω—è–ª–∏',
		review: '–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤',
		task_status: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏',
		payment: '–ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
		notification: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
	}
	return titles[type] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
}


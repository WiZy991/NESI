'use client'

import { Card, CardContent } from '@/components/ui/card'
import { AlertTriangle, ExternalLink, Trash2 } from 'lucide-react'
import { useEffect, useState } from 'react'

export default function AdminReportsPage() {
	const [reports, setReports] = useState<any[]>([])
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState('')

	// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∂–∞–ª–æ–±—ã
	const fetchReports = async () => {
		try {
			const res = await fetch('/api/admin/reports', { cache: 'no-store' })
			const data = await res.json()

			if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞')
			setReports(data.reports || [])
		} catch (err: any) {
			console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∞–ª–æ–±:', err)
			setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∞–ª–æ–±')
		} finally {
			setLoading(false)
		}
	}

	useEffect(() => {
		fetchReports()
	}, [])

	// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –∑–∞–¥–∞—á–∏
	const handleDelete = async (report: any) => {
		const typeName = report.type === 'post' ? '–ø–æ—Å—Ç' : report.type === 'comment' ? '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : '–∑–∞–¥–∞—á—É'
		
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –æ–±—ä–µ–∫—Ç–∞
		let targetId = null
		if (report.type === 'post') {
			targetId = report.post?.id
		} else if (report.type === 'comment') {
			targetId = report.comment?.id
		} else if (report.type === 'task') {
			targetId = report.task?.id
		}

		console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ:', { type: report.type, id: targetId, report })

		if (!targetId) {
			alert(`–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è ${typeName}`)
			return
		}

		if (!confirm(`–£–¥–∞–ª–∏—Ç—å ${typeName}?`))
			return

		try {
			const res = await fetch('/api/admin/reports', {
				method: 'DELETE',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({
					type: report.type,
					id: targetId,
				}),
			})

			const data = await res.json()
			if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è')

			alert(data.message || '–£–¥–∞–ª–µ–Ω–æ')
			await fetchReports()
		} catch (err: any) {
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + err.message)
		}
	}

	if (loading)
		return <p className='text-gray-400 animate-pulse p-6'>–ó–∞–≥—Ä—É–∑–∫–∞ –∂–∞–ª–æ–±...</p>

	if (error) return <p className='text-red-500 p-6'>{error}</p>

	if (!reports.length)
		return (
			<div className='p-6 text-gray-400'>
				–ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –∑–Ω–∞—á–∏—Ç –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ üòé
			</div>
		)

	return (
		<div className='text-gray-100'>
			<div className='mb-6'>
				<h2 className='text-3xl font-bold text-emerald-400 mb-2 flex items-center gap-2'>
					<AlertTriangle className='w-8 h-8 text-emerald-400' /> –ñ–∞–ª–æ–±—ã
					–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
				</h2>
				<p className='text-gray-400 text-sm'>–í—Å–µ–≥–æ –∂–∞–ª–æ–±: {reports.length}</p>
			</div>

			<div className='space-y-4'>
				{reports.map(r => (
					<Card
						key={r.id}
						className={`bg-black/40 border shadow-[0_0_15px_rgba(16,185,129,0.1)] hover:shadow-[0_0_20px_rgba(16,185,129,0.2)] transition ${
							r.type === 'task' 
								? 'border-orange-500/20 hover:border-orange-500/30' 
								: 'border-emerald-500/20 hover:border-emerald-500/30'
						}`}
					>
						<CardContent className='p-4 space-y-2'>
							<div className='flex justify-between items-start'>
								<span className={`font-semibold ${
									r.type === 'task' ? 'text-orange-400' : 'text-emerald-300'
								}`}>
									{r.type === 'post' ? 'üìÑ –ü–æ—Å—Ç' : r.type === 'comment' ? 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : 'üìã –ó–∞–¥–∞—á–∞'}
								</span>
								<span className='text-xs text-gray-400'>
									{new Date(r.createdAt).toLocaleString('ru-RU')}
								</span>
							</div>

							{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ */}
							{r.type === 'task' && r.task && (
								<div className='bg-gray-800/50 border border-gray-700 rounded-lg p-3 space-y-1'>
									<p className='text-white font-medium'>{r.task.title}</p>
									<p className='text-xs text-gray-400'>
										–ê–≤—Ç–æ—Ä: {r.task.customer?.fullName || r.task.customer?.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
									</p>
									<p className='text-xs text-gray-500'>
										–°—Ç–∞—Ç—É—Å: <span className='text-emerald-400'>{r.task.status}</span>
									</p>
								</div>
							)}

							<p className='text-gray-200'>
								<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {r.reason}
							</p>

							{r.description && (
								<p className='text-gray-400 text-sm'>
									<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {r.description}
								</p>
							)}

							{/* üîó –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–±—ä–µ–∫—Ç –∂–∞–ª–æ–±—ã */}
							{r.targetLink && (
								<a
									href={r.targetLink}
									target='_blank'
									rel='noopener noreferrer'
									className='flex items-center gap-1 text-sm text-emerald-400 hover:text-emerald-300 underline'
								>
									<ExternalLink className='w-4 h-4' /> –ü–µ—Ä–µ–π—Ç–∏ ‚Üí
								</a>
							)}

							<div className='flex justify-between items-center pt-2 border-t border-gray-800 mt-2'>
								<p className='text-sm text-gray-400'>
									–û—Ç: {r.reporter?.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (
									{r.reporter?.email})
								</p>

								{/* üóë –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
								<button
									onClick={() => handleDelete(r)}
									className='flex items-center gap-1 text-red-400 hover:text-red-300 text-sm'
								>
									<Trash2 className='w-4 h-4' /> –£–¥–∞–ª–∏—Ç—å
								</button>
							</div>
						</CardContent>
					</Card>
				))}
			</div>
		</div>
	)
}

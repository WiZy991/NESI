'use client'

import { useState, useEffect, useRef } from 'react'
import { useUser } from '@/context/UserContext'
import { toast } from 'sonner'

type Props = {
  message: {
    id: string
    content: string
    createdAt: string
    editedAt?: string | null // –î–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fileId?: string
    fileName?: string
    fileMimetype?: string
    sender: {
      id: string
      fullName?: string
      email: string
    }
  }
  chatType: 'private' | 'task'
  showSenderName?: boolean // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  isFirstInGroup?: boolean // –ü–µ—Ä–≤–æ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
  isLastInGroup?: boolean // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
  onMessageUpdate?: (updatedMessage: any) => void
  onMessageDelete?: (messageId: string) => void
}

export default function ChatMessage({ message, chatType, showSenderName = true, isFirstInGroup = true, isLastInGroup = true, onMessageUpdate, onMessageDelete }: Props) {
  const { user, token } = useUser()
  const [isEditing, setIsEditing] = useState(false)
  const [editedContent, setEditedContent] = useState(message.content)
  const [showMenu, setShowMenu] = useState(false)
  const menuRef = useRef<HTMLDivElement>(null)
  
  const fileUrl = message.fileId ? `/api/files/${message.fileId}` : null
  const isImage = message.fileMimetype?.startsWith('image/')
  const isOwnMessage = user?.id === message.sender.id
  const isDeleted = message.content === '[–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]'
  const isEdited = message.editedAt && message.editedAt !== message.createdAt
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setShowMenu(false)
      }
    }
    
    if (showMenu) {
      document.addEventListener('mousedown', handleClickOutside)
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [showMenu])

	const handleEdit = async () => {
		if (!editedContent.trim() || editedContent === message.content) {
			setIsEditing(false)
			return
		}

		try {
			const endpoint = chatType === 'private' 
				? `/api/private-messages/edit/${message.id}`
				: `/api/messages/edit/${message.id}`
			
			const res = await fetch(endpoint, {
				method: 'PATCH',
				headers: {
					'Content-Type': 'application/json',
					'Authorization': `Bearer ${token}`,
				},
				body: JSON.stringify({ content: editedContent }),
			})

			const data = await res.json()
			if (res.ok) {
				toast.success('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ')
				if (onMessageUpdate) onMessageUpdate(data.message)
				setIsEditing(false)
			} else {
				toast.error(data.error || '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
			}
		} catch (error) {
			toast.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è')
		}
	}

	const handleDelete = async () => {
		if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?')) return

		try {
			const endpoint = chatType === 'private' 
				? `/api/private-messages/delete/${message.id}`
				: `/api/messages/delete/${message.id}`
			
			const res = await fetch(endpoint, {
				method: 'DELETE',
				headers: {
					'Authorization': `Bearer ${token}`,
				},
			})

			const data = await res.json()
			if (res.ok) {
				toast.success('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
				if (onMessageDelete) onMessageDelete(message.id)
			} else {
				toast.error(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è')
			}
		} catch (error) {
			toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è')
		}
	}

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É: –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –±–æ–ª—å—à–µ, –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –º–µ–Ω—å—à–µ
  const marginBottom = isLastInGroup ? 'mb-3' : 'mb-1'
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ –∫–∞–∫ –≤ Telegram
  const getBorderRadius = () => {
    if (isDeleted) return 'rounded-2xl' // –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—É–≥–ª–µ–Ω—ã
    
    if (isOwnMessage) {
      // –°–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞) - –∑–µ–ª–µ–Ω—ã–µ
      if (isFirstInGroup && isLastInGroup) {
        // –û–¥–∏–Ω–æ—á–Ω–æ–µ: –ø–æ–ª–Ω–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–µ–∑–¥–µ, –∫—Ä–æ–º–µ –ø—Ä–∞–≤–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ —É–≥–ª–∞ (—Ö–≤–æ—Å—Ç–∏–∫)
        return 'rounded-[18px] rounded-br-[4px]'
      }
      if (isFirstInGroup) {
        // –ü–µ—Ä–≤–æ–µ –≤ –≥—Ä—É–ø–ø–µ: —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        return 'rounded-t-[18px] rounded-bl-[18px] rounded-br-[4px]'
      }
      if (isLastInGroup) {
        // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –≥—Ä—É–ø–ø–µ: —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–Ω–∏–∑—É —Å —Ö–≤–æ—Å—Ç–∏–∫–æ–º
        return 'rounded-b-[18px] rounded-tl-[18px] rounded-tr-[4px] rounded-br-[4px]'
      }
      // –°—Ä–µ–¥–Ω–µ–µ –≤ –≥—Ä—É–ø–ø–µ: —Ç–æ–ª—å–∫–æ –ª–µ–≤—ã–µ —É–≥–ª—ã —Å–∫—Ä—É–≥–ª–µ–Ω—ã
      return 'rounded-l-[18px] rounded-tr-[4px] rounded-br-[4px]'
    } else {
      // –ß—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ª–µ–≤–∞) - —Å–µ—Ä—ã–µ
      if (isFirstInGroup && isLastInGroup) {
        // –û–¥–∏–Ω–æ—á–Ω–æ–µ: –ø–æ–ª–Ω–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–µ–∑–¥–µ, –∫—Ä–æ–º–µ –ª–µ–≤–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ —É–≥–ª–∞ (—Ö–≤–æ—Å—Ç–∏–∫)
        return 'rounded-[18px] rounded-bl-[4px]'
      }
      if (isFirstInGroup) {
        // –ü–µ—Ä–≤–æ–µ –≤ –≥—Ä—É–ø–ø–µ: —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        return 'rounded-t-[18px] rounded-br-[18px] rounded-bl-[4px]'
      }
      if (isLastInGroup) {
        // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –≥—Ä—É–ø–ø–µ: —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å–Ω–∏–∑—É —Å —Ö–≤–æ—Å—Ç–∏–∫–æ–º
        return 'rounded-b-[18px] rounded-tr-[18px] rounded-tl-[4px] rounded-bl-[4px]'
      }
      // –°—Ä–µ–¥–Ω–µ–µ –≤ –≥—Ä—É–ø–ø–µ: —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤—ã–µ —É–≥–ª—ã —Å–∫—Ä—É–≥–ª–µ–Ω—ã
      return 'rounded-r-[18px] rounded-tl-[4px] rounded-bl-[4px]'
    }
  }

  return (
    <div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'} ${marginBottom}`}>
      <div className={`relative max-w-[85%] sm:max-w-[75%] min-w-[80px] group`}>
        {/* –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –µ—Å–ª–∏ showSenderName=true) */}
        {!isOwnMessage && showSenderName && (
          <div className="text-xs text-emerald-400 font-medium mb-1 px-2">
            {message.sender.fullName || message.sender.email}
          </div>
        )}
      
        <div className={`relative px-3 py-2 sm:px-3 sm:py-2 ${getBorderRadius()} ${
          isDeleted 
            ? 'bg-gray-800/50 border border-gray-700/30' // –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            : isOwnMessage 
              ? 'bg-emerald-600 text-white' // –°–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –∑–µ–ª–µ–Ω—ã–π
              : 'bg-gray-700 text-white' // –ß—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Å–µ—Ä—ã–π
        }`}>
        
        {/* –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è */}
        {isOwnMessage && !isDeleted && (
          <div className="absolute -top-1 -right-1" ref={menuRef}>
            <button
              onClick={() => setShowMenu(!showMenu)}
              className="w-6 h-6 sm:w-5 sm:h-5 rounded-full bg-gray-900/90 text-gray-400 hover:text-white hover:bg-gray-800 transition-all opacity-100 sm:opacity-0 sm:group-hover:opacity-100 flex items-center justify-center text-xs sm:text-[10px] shadow-md border border-gray-700/50"
            >
              ‚ãÆ
            </button>
            {showMenu && (
              <div className="absolute right-0 top-8 sm:top-7 bg-gray-900/95 backdrop-blur-sm border border-gray-700/50 rounded-lg shadow-2xl z-50 min-w-[140px] sm:min-w-[130px] overflow-hidden">
                <button
                  onClick={(e) => {
                    e.stopPropagation()
                    setIsEditing(true)
                    setShowMenu(false)
                  }}
                  className="block w-full text-left px-4 py-2.5 sm:px-3 sm:py-2 hover:bg-gray-800/80 text-sm sm:text-xs text-gray-300 hover:text-white transition-colors"
                >
                  ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
                <div className="border-t border-gray-700/50"></div>
                <button
                  onClick={(e) => {
                    e.stopPropagation()
                    setShowMenu(false)
                    handleDelete()
                  }}
                  className="block w-full text-left px-4 py-2.5 sm:px-3 sm:py-2 hover:bg-gray-800/80 text-sm sm:text-xs text-red-400 hover:text-red-300 transition-colors"
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            )}
          </div>
        )}

        {/* –†–µ–¥–∞–∫—Ç–æ—Ä */}
        {isEditing ? (
          <div className="space-y-2">
            <textarea
              value={editedContent}
              onChange={(e) => setEditedContent(e.target.value)}
              className="w-full bg-gray-900/50 text-white px-3 py-2 rounded-lg border border-emerald-400/50 focus:border-emerald-400 focus:outline-none text-sm resize-none"
              autoFocus
              rows={3}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault()
                  handleEdit()
                }
                if (e.key === 'Escape') {
                  setIsEditing(false)
                  setEditedContent(message.content)
                }
              }}
            />
            <div className="flex gap-2">
              <button
                onClick={handleEdit}
                className="flex-1 sm:flex-none px-4 sm:px-3 py-2 sm:py-1.5 bg-white/20 hover:bg-white/30 text-white rounded-lg text-sm sm:text-xs font-medium transition-colors"
              >
                ‚úì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
              <button
                onClick={() => {
                  setIsEditing(false)
                  setEditedContent(message.content)
                }}
                className="flex-1 sm:flex-none px-4 sm:px-3 py-2 sm:py-1.5 bg-black/20 hover:bg-black/30 text-white rounded-lg text-sm sm:text-xs font-medium transition-colors"
              >
                ‚úï –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        ) : (
          <>
            {/* –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è */}
            {message.content && (
              <div 
                className={`text-sm sm:text-sm leading-relaxed whitespace-pre-wrap ${
                  isDeleted ? 'italic text-gray-500 text-center' : ''
                }`}
                style={{
                  wordBreak: 'break-word',
                  overflowWrap: 'break-word',
                  wordWrap: 'break-word'
                }}
              >
                {message.content}
              </div>
            )}

            {/* –§–∞–π–ª */}
            {fileUrl && !isDeleted && (
              <div className="mt-2">
                {isImage ? (
                  <img
                    src={fileUrl}
                    alt={message.fileName || '–í–ª–æ–∂–µ–Ω–∏–µ'}
                    className="max-w-full max-h-64 rounded-lg"
                  />
                ) : (
                  <a
                    href={fileUrl}
                    download={message.fileName}
                    className={`inline-flex items-center gap-2 px-3 py-2 rounded-lg transition-colors ${
                      isOwnMessage
                        ? 'bg-white/20 hover:bg-white/30'
                        : 'bg-emerald-500/20 hover:bg-emerald-500/30'
                    }`}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <span className="text-lg">üìé</span>
                    <span className="text-sm">{message.fileName || '–§–∞–π–ª'}</span>
                  </a>
                )}
              </div>
            )}

            {/* –í—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <div className={`flex items-center justify-end gap-1 text-[10px] mt-1 ${
              isOwnMessage ? 'text-white/70' : 'text-gray-400'
            }`}>
              {isEdited && (
                <span className="italic">–∏–∑–º–µ–Ω–µ–Ω–æ</span>
              )}
              <span>
                {new Date(message.createdAt).toLocaleTimeString('ru-RU', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          </>
        )}
        </div>
      </div>
    </div>
  )
}

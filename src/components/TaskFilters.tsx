'use client'

import { useState, useEffect } from 'react'

type Category = {
  id: string
  name: string
  subcategories: { id: string; name: string }[]
}

type FiltersProps = {
  onFilterChange: (filters: any) => void
}

export default function TaskFilters({ onFilterChange }: FiltersProps) {
  const [categories, setCategories] = useState<Category[]>([])
  const [filters, setFilters] = useState({
    search: '',
    category: '',
    subcategory: '',
    status: '',
    minPrice: '',
    maxPrice: '',
    hasDeadline: '',
    sort: 'new',
  })

  useEffect(() => {
    fetchCategories()
  }, [])

  const fetchCategories = async () => {
    try {
      const res = await fetch('/api/categories')
      if (res.ok) {
        const data = await res.json()
        setCategories(data)
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err)
    }
  }

  const handleChange = (field: string, value: string) => {
    const newFilters = { ...filters, [field]: value }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (field === 'category') {
      newFilters.subcategory = ''
    }
    
    setFilters(newFilters)
    onFilterChange(newFilters)
  }

  const handleReset = () => {
    const resetFilters = {
      search: '',
      category: '',
      subcategory: '',
      status: '',
      minPrice: '',
      maxPrice: '',
      hasDeadline: '',
      sort: 'new',
    }
    setFilters(resetFilters)
    onFilterChange(resetFilters)
  }

  const selectedCategory = categories.find((c) => c.id === filters.category)

  return (
    <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-6 space-y-4">
      {/* –ü–æ–∏—Å–∫ */}
      <div>
        <label className="text-gray-300 text-sm mb-2 block font-semibold">
          üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é
        </label>
        <input
          type="text"
          value={filters.search}
          onChange={(e) => handleChange('search', e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞..."
          className="w-full bg-gray-900 border border-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:border-purple-500"
        />
      </div>

      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
      <div>
        <label className="text-gray-300 text-sm mb-2 block font-semibold">
          üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        </label>
        <select
          value={filters.category}
          onChange={(e) => handleChange('category', e.target.value)}
          className="w-full bg-gray-900 border border-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:border-purple-500"
        >
          <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
          {categories.map((cat) => (
            <option key={cat.id} value={cat.id}>
              {cat.name}
            </option>
          ))}
        </select>
      </div>

      {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
      {selectedCategory && selectedCategory.subcategories.length > 0 && (
        <div>
          <label className="text-gray-300 text-sm mb-2 block font-semibold">
            üìã –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
          </label>
          <select
            value={filters.subcategory}
            onChange={(e) => handleChange('subcategory', e.target.value)}
            className="w-full bg-gray-900 border border-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:border-purple-500"
          >
            <option value="">–í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {selectedCategory.subcategories.map((sub) => (
              <option key={sub.id} value={sub.id}>
                {sub.name}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* –°—Ç–∞—Ç—É—Å */}
      <div>
        <label className="text-gray-300 text-sm mb-2 block font-semibold">
          ‚≠ê –°—Ç–∞—Ç—É—Å
        </label>
        <select
          value={filters.status}
          onChange={(e) => handleChange('status', e.target.value)}
          className="w-full bg-gray-900 border border-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:border-purple-500"
        >
          <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
          <option value="open">–û—Ç–∫—Ä—ã—Ç—ã–µ</option>
          <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
          <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</option>
        </select>
      </div>

      {/* –¶–µ–Ω–∞ */}
      <div className="grid grid-cols-2 gap-3">
        <div>
          <label className="text-gray-300 text-sm mb-2 block font-semibold">
            üí∞ –¶–µ–Ω–∞ –æ—Ç
          </label>
          <input
            type="number"
            value={filters.minPrice}
            onChange={(e) => handleChange('minPrice', e.target.value)}
            placeholder="–ú–∏–Ω"
            min="0"
            className="w-full bg-gray-900 border border-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:border-purple-500"
          />
        </div>
        <div>
          <label className="text-gray-300 text-sm mb-2 block font-semibold">
            üí∞ –¶–µ–Ω–∞ –¥–æ
          </label>
          <input
            type="number"
            value={filters.maxPrice}
            onChange={(e) => handleChange('maxPrice', e.target.value)}
            placeholder="–ú–∞–∫—Å"
            min="0"
            className="w-full bg-gray-900 border border-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:border-purple-500"
          />
        </div>
      </div>

      {/* –î–µ–¥–ª–∞–π–Ω */}
      <div>
        <label className="text-gray-300 text-sm mb-2 block font-semibold">
          ‚è∞ –î–µ–¥–ª–∞–π–Ω
        </label>
        <select
          value={filters.hasDeadline}
          onChange={(e) => handleChange('hasDeadline', e.target.value)}
          className="w-full bg-gray-900 border border-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:border-purple-500"
        >
          <option value="">–ù–µ –≤–∞–∂–Ω–æ</option>
          <option value="true">–¢–æ–ª—å–∫–æ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º</option>
          <option value="false">–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞</option>
        </select>
      </div>

      {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
      <div>
        <label className="text-gray-300 text-sm mb-2 block font-semibold">
          üîÉ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        </label>
        <select
          value={filters.sort}
          onChange={(e) => handleChange('sort', e.target.value)}
          className="w-full bg-gray-900 border border-gray-700 text-white px-4 py-2 rounded-lg focus:outline-none focus:border-purple-500"
        >
          <option value="new">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
          <option value="old">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
          <option value="price_desc">–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ</option>
          <option value="price_asc">–°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ</option>
          <option value="deadline">–ü–æ –¥–µ–¥–ª–∞–π–Ω—É</option>
          <option value="responses">–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∫–ª–∏–∫–æ–≤</option>
        </select>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */}
      <button
        onClick={handleReset}
        className="w-full bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors"
      >
        üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
      </button>
    </div>
  )
}


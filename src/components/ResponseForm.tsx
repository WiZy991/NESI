'use client'

import { useEffect, useRef, useState } from 'react'
import { toast } from 'sonner'
import { useUser } from '@/context/UserContext'

export default function ResponseForm({
  taskId,
  minPrice = 0,
  isCertified = true,
  subcategoryId,
  subcategoryName,
}: {
  taskId: string
  minPrice?: number
  isCertified?: boolean
  subcategoryId?: string
  subcategoryName?: string
}) {
  const { token, user } = useUser()
  const [message, setMessage] = useState('')
  const [price, setPrice] = useState('')
  const [loading, setLoading] = useState(false)

  // üî• –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [hasResponded, setHasResponded] = useState(false)
  const [loadingCheck, setLoadingCheck] = useState(true)

  // üß† —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–ª–∞—à–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const [showTooltip, setShowTooltip] = useState(false)
  const hideTimerRef = useRef<NodeJS.Timeout | null>(null)

  const handleMouseEnter = () => {
    if (!isCertified) {
      if (hideTimerRef.current) clearTimeout(hideTimerRef.current)
      setShowTooltip(true)
    }
  }

  const handleMouseLeave = () => {
    if (!isCertified) {
      hideTimerRef.current = setTimeout(() => setShowTooltip(false), 400)
    }
  }

  const handleTooltipEnter = () => {
    if (hideTimerRef.current) clearTimeout(hideTimerRef.current)
    setShowTooltip(true)
  }

  const handleTooltipLeave = () => {
    hideTimerRef.current = setTimeout(() => setShowTooltip(false), 300)
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫–ª–∏–∫
  useEffect(() => {
    const checkResponse = async () => {
      if (!token || !user || user.role !== 'executor') {
        setLoadingCheck(false)
        return
      }
      try {
        const res = await fetch(`/api/tasks/${taskId}/my-response`, {
          headers: { Authorization: `Bearer ${token}` },
          cache: 'no-store',
        })
        const data = await res.json()
        setHasResponded(Boolean(data?.has))
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª–∏–∫–∞:', err)
      } finally {
        setLoadingCheck(false)
      }
    }
    checkResponse()
  }, [taskId, token, user])

  // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!token) return toast.error('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
    if (!isCertified) return toast.error('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é')
    if (!message || !price) return toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ü–µ–Ω—É')

    const parsedPrice = parseInt(price)
    if (Number.isNaN(parsedPrice)) return toast.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞')
    if (parsedPrice < minPrice)
      return toast.error(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî ${minPrice}‚ÇΩ`)

    setLoading(true)
    try {
      const res = await fetch(`/api/tasks/${taskId}/responses`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ message, price: parsedPrice }),
      })

      const data = await res.json().catch(() => null)
      if (!res.ok) {
        return toast.error(data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ')
      }

      toast.success('–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
      setHasResponded(true)
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', err)
      toast.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏')
    } finally {
      setLoading(false)
    }
  }

  // üí° –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (loadingCheck)
    return <div className="mt-4 text-sm text-gray-400">–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞...</div>

  if (hasResponded)
    return (
      <div className="mt-6 border-t border-gray-700 pt-4 text-center">
        <p className="text-emerald-400 font-semibold">
          ‚úÖ –í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–¥–∞—á—É.
        </p>
      </div>
    )

  // üßæ –ï—Å–ª–∏ –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  return (
    <form
      onSubmit={handleSubmit}
      className="mt-6 border-t border-gray-700 pt-4 relative"
      onMouseLeave={handleMouseLeave}
    >
      <h2 className="text-lg font-semibold mb-2">–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</h2>

      {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
      <div
        className="relative w-full mb-2"
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        <textarea
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
          disabled={!isCertified}
          className={`w-full p-2 rounded bg-gray-800 border border-gray-600 text-sm ${
            !isCertified ? 'cursor-not-allowed opacity-50' : ''
          }`}
        />
      </div>

      {/* –¶–µ–Ω–∞ */}
      <div
        className="relative w-full mb-2"
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        <input
          type="number"
          value={price}
          onChange={(e) => setPrice(e.target.value)}
          placeholder="–¶–µ–Ω–∞"
          disabled={!isCertified}
          className={`w-full p-2 rounded bg-gray-800 border border-gray-600 text-sm ${
            !isCertified ? 'cursor-not-allowed opacity-50' : ''
          }`}
        />
      </div>

      {/* üß© –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {!isCertified && showTooltip && (
        <div
          className="absolute right-0 top-full mt-2 w-72 bg-gray-900 border border-gray-700 text-gray-200 text-xs px-3 py-2 rounded shadow-lg z-10 transition-opacity duration-300"
          onMouseEnter={handleTooltipEnter}
          onMouseLeave={handleTooltipLeave}
        >
          –ß—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á—É, –Ω—É–∂–Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ ¬´{subcategoryName}¬ª. <br />
          <a
            href={`/cert?subcategoryId=${subcategoryId}`}
            className="underline text-blue-400 hover:text-blue-200"
          >
            –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ‚Üí
          </a>
        </div>
      )}

      {minPrice > 0 && (
        <p className="text-sm text-gray-400 mb-2">
          üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{minPrice}‚ÇΩ</b>
        </p>
      )}

      <button
        type="submit"
        disabled={
          loading ||
          !isCertified ||
          (!!price && parseInt(price) < (minPrice || 0))
        }
        className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-4 py-2 rounded disabled:opacity-50"
      >
        {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'}
      </button>
    </form>
  )
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD
  id          String               @id @default(cuid())
  email       String               @unique
  password    String
  resetTokens PasswordResetToken[]
  role        Role                 @default(user)
  verified    Boolean              @default(false)
  blocked     Boolean              @default(false)
  fullName    String?
  createdAt   DateTime             @default(now())

  description  String?
  avatarUrl    String?
  avatarFileId String? @unique
  avatarFile   File?   @relation("UserAvatar", fields: [avatarFileId], references: [id])
  last_private_message_read_at DateTime?

  location String?
  skills   String[]

  tasks           Task[]         @relation("Customer")
  executedTasks   Task[]         @relation("Executor")
  responses       TaskResponse[]
  reviewsAuthored Review[]       @relation("FromUser")
  reviewsReceived Review[]       @relation("ToUser")
  messages        Message[]      @relation("MessageSender")
  notifications   Notification[]

  certificationAttempts CertificationAttempt[]
  certifications        UserCertification[]

  levelId             String?    @map("level_id")
  level               UserLevel? @relation(fields: [levelId], references: [id])
  xp                  Int        @default(0)
  completedTasksCount Int        @default(0)
  avgRating           Float      @default(0)

  badges               UserBadge[]
  hireRequestsSent     HireRequest[] @relation("HireCustomer")
  hireRequestsReceived HireRequest[] @relation("HireExecutor")

  privateMessagesSent     PrivateMessage[] @relation("PrivateMessageSender")
  privateMessagesReceived PrivateMessage[] @relation("PrivateMessageRecipient")

  balance       Int           @default(100)
  transactions  Transaction[]
  frozenBalance Int           @default(0)

  communityPosts          CommunityPost[]
  communityComments       CommunityComment[]
  communityLikes          CommunityLike[]
  emailVerificationTokens EmailVerificationToken[]
  adminLogs               AdminActionLog[]
  disputes    Dispute[]
  settings       UserSettings?
=======
  id                           String                   @id @default(cuid())
  email                        String                   @unique
  password                     String
  fullName                     String?
  createdAt                    DateTime                 @default(now())
  avatarUrl                    String?
  description                  String?
  location                     String?
  skills                       String[]
  avgRating                    Float                    @default(0)
  completedTasksCount          Int                      @default(0)
  levelId                      String?                  @map("level_id")
  xp                           Int                      @default(0)
  blocked                      Boolean                  @default(false)
  role                         Role                     @default(user)
  balance                      Int                      @default(100)
  frozenBalance                Int                      @default(0)
  avatarFileId                 String?                  @unique
  verified                     Boolean                  @default(false)
  lastPrivateMessageReadAt DateTime?
  adminLogs                    AdminActionLog[]
  certificationAttempts        CertificationAttempt[]
  communityComments            CommunityComment[]
  communityLikes               CommunityLike[]
  communityPosts               CommunityPost[]
  Dispute                      Dispute[]
  emailVerificationTokens      EmailVerificationToken[]
  hireRequestsSent             HireRequest[]            @relation("HireCustomer")
  hireRequestsReceived         HireRequest[]            @relation("HireExecutor")
  messages                     Message[]                @relation("MessageSender")
  notifications                Notification[]
  resetTokens                  PasswordResetToken[]
  privateMessagesReceived      PrivateMessage[]         @relation("PrivateMessageRecipient")
  privateMessagesSent          PrivateMessage[]         @relation("PrivateMessageSender")
  reviewsAuthored              Review[]                 @relation("FromUser")
  reviewsReceived              Review[]                 @relation("ToUser")
  tasks                        Task[]                   @relation("Customer")
  executedTasks                Task[]                   @relation("Executor")
  responses                    TaskResponse[]
  transactions                 Transaction[]
  avatarFile                   File?                    @relation("UserAvatar", fields: [avatarFileId], references: [id])
  level                        UserLevel?               @relation(fields: [levelId], references: [id])
  badges                       UserBadge[]
  certifications               UserCertification[]
>>>>>>> 7a1adeb3cfff0d977adf969cd9fe1a08a52e00e9
}

model Task {
  id            String         @id @default(uuid())
  title         String
  description   String
  price         Int?
  deadline      DateTime?
  status        String         @default("open")
  customerId    String
  executorId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  completedAt   DateTime?
  subcategoryId String?
  escrowAmount  Int            @default(0)
  Dispute       Dispute[]
  files         File[]         @relation("TaskFiles")
  messages      Message[]
  review        Review?
  customer      User           @relation("Customer", fields: [customerId], references: [id])
  executor      User?          @relation("Executor", fields: [executorId], references: [id])
  subcategory   Subcategory?   @relation(fields: [subcategoryId], references: [id])
  responses     TaskResponse[]
  Transaction   Transaction[]
  customerLastReadAt DateTime?
  executorLastReadAt DateTime?

  @@index([status])
  @@index([customerId])
  @@index([executorId])
  @@index([subcategoryId])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([customerId, status])
  @@index([executorId, status])
}

model TaskResponse {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  message   String?
  createdAt DateTime @default(now())
  price     Int?
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([taskId, userId], name: "taskId_userId")
  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  taskId     String   @unique
  fromUserId String?
  toUserId   String?
  fromUser   User?    @relation("FromUser", fields: [fromUserId], references: [id])
  task       Task     @relation(fields: [taskId], references: [id])
  toUser     User?    @relation("ToUser", fields: [toUserId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  taskId    String
  senderId  String
  content   String
  fileUrl   String?
  fileId    String?
  file      File?    @relation("MessageFile", fields: [fileId], references: [id])
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])

  @@index([taskId])
  @@index([senderId])
  @@index([createdAt])
  @@index([taskId, createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([userId, createdAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  User      User     @relation(fields: [userId], references: [id])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[]
}

model Subcategory {
  id                 String              @id @default(uuid())
  name               String              @unique
  categoryId         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  minPrice           Int                 @default(500)
  certificationTest  CertificationTest?
  category           Category            @relation(fields: [categoryId], references: [id])
  tasks              Task[]
  userCertifications UserCertification[]
}

model CertificationTest {
  id            String                  @id @default(uuid())
  subcategoryId String                  @unique
  title         String
  timeLimitSec  Int
  passScore     Int
  questionCount Int
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  attempts      CertificationAttempt[]
  questions     CertificationQuestion[]
  subcategory   Subcategory             @relation(fields: [subcategoryId], references: [id])
}

model CertificationQuestion {
  id        String                @id @default(uuid())
  testId    String
  text      String
  createdAt DateTime              @default(now())
  options   CertificationOption[]
  test      CertificationTest     @relation(fields: [testId], references: [id])

  @@index([testId])
}

model CertificationOption {
  id         String                @id @default(uuid())
  questionId String
  text       String
  isCorrect  Boolean               @default(false)
  question   CertificationQuestion @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model CertificationAttempt {
  id         String            @id @default(uuid())
  userId     String
  testId     String
  startedAt  DateTime          @default(now())
  finishedAt DateTime?
  score      Int?
  passed     Boolean?
  test       CertificationTest @relation(fields: [testId], references: [id])
  user       User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([testId])
  @@index([userId, testId, startedAt])
}

model UserCertification {
  id            String      @id @default(uuid())
  userId        String
  subcategoryId String
  level         String      @default("CERTIFIED")
  grantedAt     DateTime    @default(now())
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, subcategoryId], name: "userId_subcategoryId")
  @@index([subcategoryId])
}

model UserLevel {
  id          String @id @default(uuid())
  slug        String @unique
  name        String
  description String
  minScore    Int
  users       User[]
}

model Badge {
  id          String      @id @default(cuid())
  name        String
  description String
  icon        String
  condition   String
  users       UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model HireRequest {
  id         String   @id @default(uuid())
  customerId String
  executorId String
  createdAt  DateTime @default(now())
  paid       Boolean  @default(false)
  status     String   @default("pending")
  customer   User     @relation("HireCustomer", fields: [customerId], references: [id])
  executor   User     @relation("HireExecutor", fields: [executorId], references: [id])
}

model PrivateMessage {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  content     String?
  fileUrl     String?
  mimeType    String?
  fileName    String?
  size        Int?
  createdAt   DateTime @default(now())
  fileId      String?
  file        File?    @relation("PrivateMessageFile", fields: [fileId], references: [id])
  recipient   User     @relation("PrivateMessageRecipient", fields: [recipientId], references: [id])
  sender      User     @relation("PrivateMessageSender", fields: [senderId], references: [id])
}

model AdminInvite {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
  usedBy    String?  @db.Uuid
}

model Transaction {
  id         String   @id @default(cuid())
  userId     String
  amount     Int
  type       String
  reason     String
  createdAt  DateTime @default(now())
  reviewedBy String?
  status     String   @default("pending")
  taskId     String?
  Task       Task?    @relation(fields: [taskId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([status])
}

model File {
  id          String           @id @default(cuid())
  filename    String
  mimetype    String
  size        Int
  data        Bytes?
  url         String?
  createdAt   DateTime         @default(now())
  taskId      String?
  task        Task?            @relation("TaskFiles", fields: [taskId], references: [id])
  messages    Message[]        @relation("MessageFile")
  privateMsgs PrivateMessage[] @relation("PrivateMessageFile")
  userAvatar  User?            @relation("UserAvatar")
}

model CommunityPost {
  id        String             @id @default(cuid())
  authorId  String
  title     String
  content   String
  imageUrl  String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  comments  CommunityComment[]
  likes     CommunityLike[]
  author    User               @relation(fields: [authorId], references: [id])
  views     CommunityView[]

  @@index([authorId])
  @@index([createdAt])
  @@index([authorId, createdAt])
}

model CommunityComment {
  id        String        @id @default(cuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime      @default(now())
  parentId  String?
  imageUrl  String?
  author    User          @relation(fields: [authorId], references: [id])
  post      CommunityPost @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([authorId])
  @@index([createdAt])
  @@index([postId, createdAt])
}

model CommunityLike {
  id     String        @id @default(cuid())
  postId String
  userId String
  post   CommunityPost @relation(fields: [postId], references: [id])
  user   User          @relation(fields: [userId], references: [id])

  @@unique([postId, userId], name: "postId_userId")
}

model CommunityView {
  id        String        @id @default(cuid())
  postId    String
  userId    String?
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminActionLog {
  id         String   @id @default(uuid())
  adminId    String
  action     String
  entityType String
  entityId   String?
  details    String?
  createdAt  DateTime @default(now())
  admin      User     @relation(fields: [adminId], references: [id])
}

model SystemMetric {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Float?
  stringVal String?
  createdAt DateTime @default(now())
}

model Dispute {
  id            String    @id
  taskId        String
  userId        String
  reason        String
  details       String?
  status        String    @default("open")
  resolution    String?
  createdAt     DateTime  @default(now())
  resolvedAt    DateTime?
  adminDecision String?
  Task          Task      @relation(fields: [taskId], references: [id])
  User          User      @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([taskId])
  @@index([userId])
}

<<<<<<< HEAD
model UserSettings {
  userId            String  @id
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(false)
  showOnlineStatus   Boolean @default(true)
  hideEmail          Boolean @default(false)
  user               User    @relation(fields: [userId], references: [id])
}
=======
enum Role {
  user
  executor
  admin
  customer
}

model CommunityReport {
  id          String   @id @default(cuid())
  type        String   // "post" или "comment"
  postId      String?
  commentId   String?
  reason      String
  description String?
  reporterId  String?  // кто подал жалобу
  createdAt   DateTime @default(now())
}
>>>>>>> 7a1adeb3cfff0d977adf969cd9fe1a08a52e00e9

// src/lib/redis.ts
// Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

import Redis from 'ioredis'

// –°–æ–∑–¥–∞–µ–º Redis –∫–ª–∏–µ–Ω—Ç
const redis = new Redis({
	host: process.env.REDIS_HOST || 'localhost',
	port: parseInt(process.env.REDIS_PORT || '6379'),
	password: process.env.REDIS_PASSWORD,
	retryStrategy: (times: number) => {
		const delay = Math.min(times * 50, 2000)
		return delay
	},
	maxRetriesPerRequest: 3,
	enableReadyCheck: true,
	lazyConnect: false,
})

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
redis.on('connect', () => {
	console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω')
})

redis.on('error', err => {
	console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', err)
})

redis.on('ready', () => {
	console.log('üöÄ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
})

// –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
 */
export async function cacheGet<T>(key: string): Promise<T | null> {
	try {
		const cached = await redis.get(key)
		if (!cached) return null

		return JSON.parse(cached) as T
	} catch (error) {
		console.error('‚ùå Redis GET –æ—à–∏–±–∫–∞:', error)
		return null
	}
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–µ—à
 * @param key - –∫–ª—é—á
 * @param value - –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param ttl - –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
 */
export async function cacheSet(
	key: string,
	value: any,
	ttl: number = 3600
): Promise<boolean> {
	try {
		await redis.setex(key, ttl, JSON.stringify(value))
		return true
	} catch (error) {
		console.error('‚ùå Redis SET –æ—à–∏–±–∫–∞:', error)
		return false
	}
}

/**
 * –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
 */
export async function cacheDelete(key: string): Promise<boolean> {
	try {
		await redis.del(key)
		return true
	} catch (error) {
		console.error('‚ùå Redis DEL –æ—à–∏–±–∫–∞:', error)
		return false
	}
}

/**
 * –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
 * –ù–∞–ø—Ä–∏–º–µ—Ä: cacheDeletePattern('tasks:*')
 */
export async function cacheDeletePattern(pattern: string): Promise<number> {
	try {
		const keys = await redis.keys(pattern)
		if (keys.length === 0) return 0

		await redis.del(...keys)
		return keys.length
	} catch (error) {
		console.error('‚ùå Redis DEL pattern –æ—à–∏–±–∫–∞:', error)
		return 0
	}
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
 */
export async function cacheExists(key: string): Promise<boolean> {
	try {
		const result = await redis.exists(key)
		return result === 1
	} catch (error) {
		console.error('‚ùå Redis EXISTS –æ—à–∏–±–∫–∞:', error)
		return false
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å TTL –∫–ª—é—á–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
 */
export async function cacheTTL(key: string): Promise<number> {
	try {
		return await redis.ttl(key)
	} catch (error) {
		console.error('‚ùå Redis TTL –æ—à–∏–±–∫–∞:', error)
		return -1
	}
}

/**
 * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫
 */
export async function cacheIncr(key: string, ttl?: number): Promise<number> {
	try {
		const value = await redis.incr(key)
		if (ttl) {
			await redis.expire(key, ttl)
		}
		return value
	} catch (error) {
		console.error('‚ùå Redis INCR –æ—à–∏–±–∫–∞:', error)
		return 0
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
 */
export async function getCacheStats() {
	try {
		const info = await redis.info('stats')
		const memory = await redis.info('memory')

		// –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		const stats = {
			hits: parseInt(info.match(/keyspace_hits:(\d+)/)?.[1] || '0'),
			misses: parseInt(info.match(/keyspace_misses:(\d+)/)?.[1] || '0'),
			totalKeys: await redis.dbsize(),
			usedMemory: memory.match(/used_memory_human:(.+)/)?.[1] || 'N/A',
			connectedClients: parseInt(
				info.match(/connected_clients:(\d+)/)?.[1] || '0'
			),
		}

		const total = stats.hits + stats.misses
		const hitRate = total > 0 ? ((stats.hits / total) * 100).toFixed(2) : '0'

		return {
			...stats,
			hitRate: `${hitRate}%`,
		}
	} catch (error) {
		console.error('‚ùå Redis stats –æ—à–∏–±–∫–∞:', error)
		return null
	}
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
 */
export async function cacheFlushAll(): Promise<boolean> {
	try {
		await redis.flushall()
		console.log('üóëÔ∏è  Redis –∫–µ—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω')
		return true
	} catch (error) {
		console.error('‚ùå Redis FLUSHALL –æ—à–∏–±–∫–∞:', error)
		return false
	}
}

export default redis

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π –∫–µ—à–∞
export const CACHE_KEYS = {
	categories: 'categories:all',
	subcategories: 'subcategories:all',
	user: (id: string) => `user:${id}`,
	task: (id: string) => `task:${id}`,
	tasksList: (page: number, filters: string) => `tasks:list:${page}:${filters}`,
	notifications: (userId: string) => `notifications:${userId}`,
	profile: (userId: string) => `profile:${userId}`,
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è TTL
export const CACHE_TTL = {
	SHORT: 300, // 5 –º–∏–Ω—É—Ç
	MEDIUM: 1800, // 30 –º–∏–Ω—É—Ç
	LONG: 3600, // 1 —á–∞—Å
	DAY: 86400, // 24 —á–∞—Å–∞
}
